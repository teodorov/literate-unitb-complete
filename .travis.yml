# This is the complex Travis configuration, which is intended for use
# on open source libraries which need compatibility across multiple GHC
# versions, must work with cabal-install, and should be
# cross-platform. For more information and other options, see:
#
# https://docs.haskellstack.org/en/stable/travis_ci/
#
# Copy these contents into the root directory of your Github project in a file
# named .travis.yml

# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - $HOME/z3
  - $HOME/unitb/literate-unitb-complete/.stack-work

  - $HOME/build/unitb/literate-unitb-complete/.stack-work/ 
  - $HOME/build/unitb/literate-unitb-complete/literate-unitb-config/.stack-work/ 
  - $HOME/build/unitb/literate-unitb-complete/literate-unitb-latex/.stack-work/ 
  - $HOME/build/unitb/literate-unitb-complete/literate-unitb-logic/.stack-work/ 
  - $HOME/build/unitb/literate-unitb-complete/literate-unitb-scripts/.stack-work/ 
  - $HOME/build/unitb/literate-unitb-complete/literate-unitb-utils/.stack-work/ 
  - $HOME/build/unitb/literate-unitb-complete/literate-unitb/.stack-work/ 
  - $HOME/build/unitb/literate-unitb-complete/syntax-error/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/unitb-testing/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/bipartite-graph/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/classy-lens-hierarchy/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/co-applicative/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/data-compressed/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/data-packaged/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/file-system-mockup/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/generic-instances/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/lens-extra/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/partial-order/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/pretty-printable/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/show-with/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/string-lenses/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/transformer-lenses/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/typelist-functor/.stack-work/
  - $HOME/build/unitb/literate-unitb-complete/libs/unfoldable/.stack-work/

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
jobs:
  include:
  - stage: Prepare cache
    env: BUILD=stack ARGS="--stack-yaml stack-lts-3.yaml"
    compiler: ": #stack 7.10.2"
    addons: {apt: {packages: [libgmp-dev]}}
    script: True
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-6.yaml"
    compiler: ": #stack 7.10.3"
    addons: {apt: {packages: [libgmp-dev]}}
    script: True
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-7.yaml"
    compiler: ": #stack 8.0.1"
    addons: {apt: {packages: [libgmp-dev]}}
    script: True
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-8.yaml"
    compiler: ": #stack 8.0.2"
    addons: {apt: {packages: [libgmp-dev]}}
    script: True
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-8.yaml"
    compiler: ": #stack 8.0.2 osx"
    os: osx
    script: True
  
  - env: BUILD=stack ARGS="--stack-yaml stack-nightly.yaml --resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}
    script: True

  - stage: Test literate-unitb-logic
    env: BUILD=stack ARGS=""
    compiler: ": #stack default"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-logic --bench --no-run-benchmarks

  - env: BUILD=stack ARGS="--stack-yaml stack-lts-3.yaml"
    compiler: ": #stack 7.10.2"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-logic --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-6.yaml"
    compiler: ": #stack 7.10.3"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-logic --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-7.yaml"
    compiler: ": #stack 8.0.1"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-logic --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-8.yaml"
    compiler: ": #stack 8.0.2"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-logic --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-8.yaml"
    compiler: ": #stack 8.0.2 osx"
    os: osx
    script: travis_long stack --no-terminal $ARGS test literate-unitb-logic --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-nightly.yaml --resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-logic --bench --no-run-benchmarks
  
  - stage: Test literate-unitb-scripts
    env: BUILD=stack ARGS=""
    compiler: ": #stack default"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-scripts --bench --no-run-benchmarks

  - env: BUILD=stack ARGS="--stack-yaml stack-lts-3.yaml"
    compiler: ": #stack 7.10.2"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-scripts --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-6.yaml"
    compiler: ": #stack 7.10.3"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-scripts --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-7.yaml"
    compiler: ": #stack 8.0.1"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-scripts --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-8.yaml"
    compiler: ": #stack 8.0.2"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-scripts --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-8.yaml"
    compiler: ": #stack 8.0.2 osx"
    os: osx
    script: travis_long stack --no-terminal $ARGS test literate-unitb-scripts --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-nightly.yaml --resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}
    script: travis_long stack --no-terminal $ARGS test literate-unitb-scripts --bench --no-run-benchmarks
  
  - stage: Full test
    env: BUILD=stack ARGS=""
    compiler: ": #stack default"
    addons: {apt: {packages: [libgmp-dev]}}
    script: 
      - unitb-option --capacity 16
      - travis_long stack --no-terminal $ARGS test literate-unitb --bench --no-run-benchmarks

  - env: BUILD=stack ARGS="--stack-yaml stack-lts-3.yaml"
    compiler: ": #stack 7.10.2"
    addons: {apt: {packages: [libgmp-dev]}}
    script: 
      - unitb-option --capacity 16
      - travis_long stack --no-terminal $ARGS test literate-unitb --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-6.yaml"
    compiler: ": #stack 7.10.3"
    addons: {apt: {packages: [libgmp-dev]}}
    script: 
      - unitb-option --capacity 16
      - travis_long stack --no-terminal $ARGS test literate-unitb --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-7.yaml"
    compiler: ": #stack 8.0.1"
    addons: {apt: {packages: [libgmp-dev]}}
    script: 
      - unitb-option --capacity 16
      - travis_long stack --no-terminal $ARGS test literate-unitb --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-8.yaml"
    compiler: ": #stack 8.0.2"
    addons: {apt: {packages: [libgmp-dev]}}
    script: 
      - unitb-option --capacity 16
      - travis_long stack --no-terminal $ARGS test literate-unitb --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-lts-8.yaml"
    compiler: ": #stack 8.0.2 osx"
    os: osx
    script: 
      - unitb-option --capacity 16
      - travis_long stack --no-terminal $ARGS test literate-unitb --bench --no-run-benchmarks
  
  - env: BUILD=stack ARGS="--stack-yaml stack-nightly.yaml --resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}
    script: 
      - unitb-option --capacity 16
      - travis_long stack --no-terminal $ARGS test literate-unitb --bench --no-run-benchmarks

  # Build on OS X in addition to Linux

  #- env: BUILD=stack ARGS="--resolver lts-2"
  #  compiler: ": #stack 7.8.4 osx"
  #  os: osx





  # - env: BUILD=stack ARGS="--resolver nightly"
  #   compiler: ": #stack nightly osx"
  #   os: osx

  allow_failures:
  - env: BUILD=cabal GHCVER=7.10.3 CABALVER=1.22 HAPPYVER=1.19.5 ALEXVER=3.1.7 STACKARGS=""
  # - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
  - env: BUILD=stack ARGS="--stack-yaml stack-nightly.yaml"
  # - env: BUILD=stack ARGS="--resolver lts-8 --stack-yaml stack-nightly.yaml"
  # - env: BUILD=cabal GHCVER=8.0.1 CABALVER=1.24 HAPPYVER=1.19.5 ALEXVER=3.1.7 STACKARGS=""
  # - env: BUILD=cabal GHCVER=8.0.2 CABALVER=1.24 HAPPYVER=1.19.5 ALEXVER=3.1.7 STACKARGS="--stack-yaml stack-nightly.yaml"

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

# Download z3
- mkdir $HOME/z3 || echo exists
- |
  if [ `uname` = "Darwin" ]
  then
    travis_retry wget -O z3.zip https://github.com/Z3Prover/z3/releases/download/z3-4.4.1/z3-4.4.1-x64-osx-10.11.zip
  else
    travis_retry wget -O z3.zip https://github.com/Z3Prover/z3/releases/download/z3-4.4.1/z3-4.4.1-x64-ubuntu-14.04.zip
  fi
- unzip z3.zip
- |
  if [ `uname` = "Darwin" ]
  then
    cp z3-4.4.1-x64-osx-10.11/bin/z3 $HOME/z3
  else
    cp z3-4.4.1-x64-ubuntu-14.04/bin/z3 $HOME/z3
  fi
- export PATH="$HOME/z3:$PATH"
- z3 -h
# 
- Z3_CONFIG="$HOME/Literate Unit-B"
- mkdir "$Z3_CONFIG" || echo ""
- echo [DEFAULT] > "$Z3_CONFIG/z3.config"
- echo "capacity = 16" >> "$Z3_CONFIG/z3.config"
- echo "timeout = 30" >> "$Z3_CONFIG/z3.config"
- cat "$Z3_CONFIG/z3.config"
# Deploy anti-timeout weapon
- mkdir $HOME/scripts || echo ""
- export PATH="$HOME/scripts:$PATH"
- pwd
- ls
- chmod +x travis_long.sh
- cp travis_long.sh $HOME/scripts/travis_long
# Download and unpack the stack executable
- export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
- mkdir -p ~/.local/bin
- |
  if [ `uname` = "Darwin" ]
  then
    travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi

  # Use the more reliable S3 mirror of Hackage
  mkdir -p $HOME/.cabal
  echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
  echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

  if [ "$CABALVER" != "1.16" ]
  then
    echo 'jobs: $ncpus' >> $HOME/.cabal/config
  fi

install:
- if [ -f configure.ac ]; then autoreconf -i; fi
- travis_long stack --no-terminal --install-ghc $ARGS install literate-unitb-logic literate-unitb --only-dependencies --test
- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
# - |
#   set -ex
#   case "$BUILD" in
#     stack)
#       # travis_wait 70 stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
#       # travis_long stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
#       # travis_long stack --no-terminal --install-ghc $ARGS build --bench --only-dependencies
#       travis_long stack --no-terminal --install-ghc $ARGS install literate-unitb-config literate-unitb-latex lens text
#       ;;
#     cabal)
#       cabal --version
#       travis_retry cabal update

#       # Get the list of packages from the stack.yaml file
#       PACKAGES=$(stack $STACKARGS --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')

#       cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
#       ;;
#   esac
#   set +ex

# script:
# - |
#   set -ex
#   case "$BUILD" in
#     stack)
#       # stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
#       # travis_wait 40 stack --no-terminal $ARGS test --bench --no-run-benchmarks 
#       # 
#       pwd
#       ls || echo "nothing"
#       # (test "ls $HOME/.stack" && echo skipping the build) || travis_long stack --no-terminal $ARGS test --bench --no-run-benchmarks
#       travis_long stack --no-terminal $ARGS test literate-unitb-logic --bench --no-run-benchmarks
#       # echo $HOME
#       # echo not calling stack
#       ;;
#     cabal)
#       cabal install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
#       # travis_wait 40 cabal install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES

#       ORIGDIR=$(pwd)
#       for dir in $PACKAGES
#       do
#         cd $dir
#         cabal check || [ "$CABALVER" == "1.16" ]
#         cabal sdist
#         PKGVER=$(cabal info . | awk '{print $2;exit}')
#         SRC_TGZ=$PKGVER.tar.gz
#         cd dist
#         tar zxfv "$SRC_TGZ"
#         cd "$PKGVER"
#         cabal configure --enable-tests
#         cabal build
#         cd $ORIGDIR
#       done
#       ;;
#   esac
#   set +ex

script: travis_long stack --no-terminal $ARGS test literate-unitb --bench --no-run-benchmarks

before_deploy:
  - travis_long stack --no-terminal $ARGS install
  - pwd
  - mkdir release
  - mkdir release/literate-unitb
  - mkdir release/literate-unitb/sty
  - cp Tests/*.sty release/literate-unitb/sty/
  - cp $HOME/.local/bin/unitb release/unitb/
  - cp $HOME/.local/bin/unitb-option release/unitb/
  - cp $HOME/z3/z3 release/unitb/
  - echo zip -r $HOME/`unitb-zip-name $TRAVIS_OS_NAME`.zip 
  - ls release
  - ls release/literate-unitb
  - zip -r $HOME/`unitb-zip-name $TRAVIS_OS_NAME`.zip release/literate-unitb

deploy:
  provider: releases
  skip_cleanup: true
  api_key:
    secure: JEie98jM2ck58ODdz2t0kKfojSodrhRyfOklkJgRMqUC4OH5AAZ6Mn2dzxPcSPaUmRIUt3nzihD3T1DPWdzvRKKGMG2EClpXlsRn34gDJmQDwJF4zTxSxxH0xmAf6nmnDbybYIAri/NWTGieJjAERvCaj9wr1018Wtduy/zdyElQbR9Hfb9mDF9RASOnAMPHh9QHGz6ovDX3k0A92BCuUGiJOcSycW6Zl41d16UCL92nXZeomT3oE53jQQ73L7wiAd/Vh+dOAUrcONSU61UZPcG0mF6VkvogMajlA8YpXCuvjQU6P8s0wHoaKbCXxFK6PjxGONrDTBYr250CGH5zTRnFEiHGBYFOjWvyWSlfPTBpiUwYEgSo1Lqq+a3wkjYEMRS/b62VWOohbx3UkvxaLxk8lLF+m5hp44Vr1rXBQihVvuxnAjKRQ1YqmI/IvSY71oV2h7muFdcOxqJo2kYOFyLPnXbMJ7vRVRSHaMVfBeeStbw/Tz3CAlWbqS9vayBZBNi5ipYoMqKHj2IpMjb/c+Nrjpw3LIdQe3TnMlnlgyThfG0xLxCtiiWG019LvKffhp6h80QGOE5Z86hdkWxIZ9L6ufjq7kOpXHDTnOO5y1KYsnjPV59Gr6uxto5SSnoHsKUUJnXCTy2VlC+3+hN3KfVZDjQlocRui7U8T2BIeLI=
  file: 
    - $HOME/`unitb-zip-name $TRAVIS_OS_NAME`.zip
  on:
    tags: true
    repo: unitb/literate-unitb
    condition: $BUILD=stack 
    condition: $ARGS="--stack-yaml stack-lts-6.yaml"
notifications:
  slack:
    secure: uXA7VRfa4tcKGttj6C6OsxC3GByJ/7ptfZog3flbra4gJrKQ/50cVobOSUwbvsZbDiCf4keiOF3uqSc2eLWAVoivH2Fg3sd0QbPC9WlnPPAyfjjnBa4G+gZMyLko9ZLEyN0H1WAqx3zYLS2NuPag56mETlmqir6hJ4dOqZqla85kDrOBO5kHJVP8Qt7bGF5XCJs7gBQP5CT4Y5dNBvrg19HO672+6PML7sDMxiZ0nISI+rTm4mzn3po/1ISlVF7Y9bCBCk39Vvh92tvT4UWjGYr9Ji0sC91LJXSAlIc0vI3UvttxA4QcLlQeB+wS0ETM2/boRSWxcMYP4EhMokiUzsY75M7uHeY+BzAQx8l9OSFrsfiena0gALGNeR16d2OVMB7+ef/W0b5jYqxfSI6Dd8XKehlZbP1mqCxKLdDMFzdVqTigh9xvd/6ReqcH1+a4sveS0WY+kgU+/Icxro5mp0L0n/FgniMSG8fNdKE/MQEp03gAhVfn9Z4uqZ4S48oHR5OIh5fyCCxRi2TRnqg8hIVijc30KhXi2yikDa58DsFhvLoOsiOBKy6uwWE5ibDssw6mKgMtjUIAcwqm3l5RQ/eW9EU/nB4C86NL84uSR0AnjD5trssh1DnL9q/TWLzo1etwRIxx8XtXji0pZiN+mgUt6YStI0haJ2bd7wiYGIs=
  webhooks:
    urls:
      - "https://scalar.vector.im/api/neb/services/hooks/dHJhdmlzLWNpLyU0MGFtaW5iJTNBbWF0cml4Lm9yZy8lMjF4eUlwdkJPc3FYWWhVRmdWWVclM0FtYXRyaXgub3Jn"
    on_success: always  # always|never|change
    on_failure: always
    on_start: never
