; m1/LIVE/prog3/ensure/TR/visit/NEG
(set-option :auto-config false)
(set-option :smt.timeout 3000)
(declare-datatypes (a) ( (Maybe (Just (fromJust a)) Nothing) ))
(declare-datatypes () ( (Null null) ))
(declare-datatypes (a b) ( (Pair (pair (first a) (second b))) ))
(define-sort guarded (a) (Maybe a))
; comment: we don't need to declare the sort Bool
; comment: we don't need to declare the sort Int
(declare-sort sl$Pcs 0)
; comment: we don't need to declare the sort Real
(define-sort set (a) (Array a Bool))
(declare-const V (set sl$Pcs))
(declare-const b Bool)
(declare-const b@prime Bool)
(declare-const vs (set sl$Pcs))
(declare-const vs@prime (set sl$Pcs))
(declare-fun card@@sl$Pcs ( (set sl$Pcs) ) Int)
(declare-fun finite@@sl$Pcs ( (set sl$Pcs) ) Bool)
(declare-fun mk-set@@sl$Pcs (sl$Pcs) (set sl$Pcs))
(declare-fun p@param () sl$Pcs)
(define-fun all@@sl$Pcs
            ()
            (set sl$Pcs)
            ( (as const (set sl$Pcs))
              true ))
(define-fun compl@@sl$Pcs
            ( (s1 (set sl$Pcs)) )
            (set sl$Pcs)
            ( (_ map not)
              s1 ))
(define-fun elem@@sl$Pcs
            ( (x sl$Pcs)
              (s1 (set sl$Pcs)) )
            Bool
            (select s1 x))
(define-fun empty-set@@sl$Pcs
            ()
            (set sl$Pcs)
            ( (as const (set sl$Pcs))
              false ))
(define-fun set-diff@@sl$Pcs
            ( (s1 (set sl$Pcs))
              (s2 (set sl$Pcs)) )
            (set sl$Pcs)
            (intersect s1 ( (_ map not) s2 )))
(define-fun st-subset@@sl$Pcs
            ( (s1 (set sl$Pcs))
              (s2 (set sl$Pcs)) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun sl$Pcs
            ()
            (set sl$Pcs)
            ( (as const (set sl$Pcs))
              true ))
(assert (forall ( (r (set sl$Pcs)) )
                (! (=> (finite@@sl$Pcs r) (<= 0 (card@@sl$Pcs r)))
                   :pattern
                   ( (<= 0 (card@@sl$Pcs r)) ))))
(assert (forall ( (r (set sl$Pcs)) )
                (! (= (= (card@@sl$Pcs r) 0) (= r empty-set@@sl$Pcs))
                   :pattern
                   ( (card@@sl$Pcs r) ))))
(assert (forall ( (x sl$Pcs) )
                (! (= (card@@sl$Pcs (mk-set@@sl$Pcs x)) 1)
                   :pattern
                   ( (card@@sl$Pcs (mk-set@@sl$Pcs x)) ))))
(assert (forall ( (r (set sl$Pcs)) )
                (! (= (= (card@@sl$Pcs r) 1)
                      (exists ( (x sl$Pcs) ) (and true (= r (mk-set@@sl$Pcs x)))))
                   :pattern
                   ( (card@@sl$Pcs r) ))))
(assert (forall ( (r (set sl$Pcs))
                  (r0 (set sl$Pcs)) )
                (! (=> (= (intersect r r0) empty-set@@sl$Pcs)
                       (= (card@@sl$Pcs (union r r0))
                          (+ (card@@sl$Pcs r) (card@@sl$Pcs r0))))
                   :pattern
                   ( (card@@sl$Pcs (union r r0)) ))))
(assert (forall ( (x sl$Pcs)
                  (y sl$Pcs) )
                (! (= (elem@@sl$Pcs x (mk-set@@sl$Pcs y)) (= x y))
                   :pattern
                   ( (elem@@sl$Pcs x (mk-set@@sl$Pcs y)) ))))
(assert (forall ( (s1 (set sl$Pcs))
                  (s2 (set sl$Pcs)) )
                (! (=> (finite@@sl$Pcs s1)
                       (finite@@sl$Pcs (set-diff@@sl$Pcs s1 s2)))
                   :pattern
                   ( (finite@@sl$Pcs (set-diff@@sl$Pcs s1 s2)) ))))
(assert (forall ( (s1 (set sl$Pcs))
                  (s2 (set sl$Pcs)) )
                (! (=> (and (finite@@sl$Pcs s1) (finite@@sl$Pcs s2))
                       (finite@@sl$Pcs (union s1 s2)))
                   :pattern
                   ( (finite@@sl$Pcs (union s1 s2)) ))))
(assert (forall ( (s1 (set sl$Pcs))
                  (s2 (set sl$Pcs)) )
                (! (=> (and (finite@@sl$Pcs s2) (not (finite@@sl$Pcs s1)))
                       (not (finite@@sl$Pcs (set-diff@@sl$Pcs s1 s2))))
                   :pattern
                   ( (finite@@sl$Pcs (set-diff@@sl$Pcs s1 s2)) ))))
(assert (forall ( (x sl$Pcs) )
                (! (finite@@sl$Pcs (mk-set@@sl$Pcs x))
                   :pattern
                   ( (finite@@sl$Pcs (mk-set@@sl$Pcs x)) ))))
(assert (finite@@sl$Pcs empty-set@@sl$Pcs))
(assert (not (elem@@sl$Pcs p@param vs)))
; SKIP:b
(assert (= b@prime b))
; act1
(assert (= vs@prime (union vs (mk-set@@sl$Pcs p@param))))
; asm0
(assert (finite@@sl$Pcs sl$Pcs))
; inv0
(assert (=> b (= vs sl$Pcs)))
(assert (not (=> (and (= (set-diff@@sl$Pcs sl$Pcs vs) V)
                      (not (= vs sl$Pcs))
                      (= (set-diff@@sl$Pcs sl$Pcs vs) V))
                 (not (and (= (set-diff@@sl$Pcs sl$Pcs vs@prime) V)
                           (not (= vs@prime sl$Pcs))
                           (= (set-diff@@sl$Pcs sl$Pcs vs@prime) V))))))
(check-sat-using (or-else (then qe smt)
                          (then simplify smt)
                          (then skip smt)
                          (then (using-params simplify :expand-power true) smt)))
; m1/LIVE/prog3/ensure/TR/visit/NEG
