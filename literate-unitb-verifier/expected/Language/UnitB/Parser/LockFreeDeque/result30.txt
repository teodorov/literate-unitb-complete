; m5/handle:pushR/C_SCH/weaken/saf/add:popL/SAF/handle:pushR:empty
(set-option :auto-config false)
(set-option :smt.timeout 3000)
(declare-datatypes (a) ( (Maybe (Just (fromJust a)) Nothing) ))
(declare-datatypes () ( (Null null) ))
(declare-datatypes (a b) ( (Pair (pair (first a) (second b))) ))
(declare-datatypes (a1 a2 a3)
                   ( (Record-item-left-right (Record-item-left-right (@@field@@_item a1)
                                                                     (@@field@@_left a2)
                                                                     (@@field@@_right a3))) ))
(define-sort guarded (a) (Maybe a))
(declare-sort sl$Addr 0)
; comment: we don't need to declare the sort Bool
; comment: we don't need to declare the sort Int
(declare-sort sl$OBJ 0)
(declare-sort sl$REQ 0)
; comment: we don't need to declare the sort Real
(define-sort pfun (a b) (Array a (Maybe b)))
(define-sort set (a) (Array a Bool))
(declare-const LH sl$Addr)
(declare-const LH@prime sl$Addr)
(declare-const RH sl$Addr)
(declare-const RH@prime sl$Addr)
(declare-const dummy sl$Addr)
(declare-const emp Bool)
(declare-const emp@prime Bool)
(declare-const insL (pfun sl$REQ sl$OBJ))
(declare-const insL@prime (pfun sl$REQ sl$OBJ))
(declare-const insR (pfun sl$REQ sl$OBJ))
(declare-const insR@prime (pfun sl$REQ sl$OBJ))
(declare-const link
               (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-const link@prime
               (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-const p Int)
(declare-const p@prime Int)
(declare-const popL (set sl$REQ))
(declare-const popL@prime (set sl$REQ))
(declare-const popR (set sl$REQ))
(declare-const popR@prime (set sl$REQ))
(declare-const ppd (set sl$REQ))
(declare-const ppd@prime (set sl$REQ))
(declare-const pshL (set sl$REQ))
(declare-const pshL@prime (set sl$REQ))
(declare-const pshR (set sl$REQ))
(declare-const pshR@prime (set sl$REQ))
(declare-const q Int)
(declare-const q@prime Int)
(declare-const qe (pfun Int sl$OBJ))
(declare-const qe@prime (pfun Int sl$OBJ))
(declare-const r sl$REQ)
(declare-const r0 sl$REQ)
(declare-const rep (pfun Int sl$Addr))
(declare-const rep@prime (pfun Int sl$Addr))
(declare-const req (set sl$REQ))
(declare-const res (pfun sl$REQ sl$OBJ))
(declare-const res@prime (pfun sl$REQ sl$OBJ))
(declare-const result sl$OBJ)
(declare-const result@prime sl$OBJ)
(declare-const v Int)
(declare-const v0 Int)
(declare-const ver Int)
(declare-const ver@prime Int)
(declare-fun apply@@Int@@sl$Addr
             ( (pfun Int sl$Addr)
               Int )
             sl$Addr)
(declare-fun apply@@Int@@sl$OBJ ( (pfun Int sl$OBJ) Int ) sl$OBJ)
(declare-fun apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
               sl$Addr )
             (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
(declare-fun apply@@sl$REQ@@sl$OBJ
             ( (pfun sl$REQ sl$OBJ)
               sl$REQ )
             sl$OBJ)
(declare-fun between (Int Int Int) Bool)
(declare-fun betweenL (Int Int Int) Bool)
(declare-fun betweenLR (Int Int Int) Bool)
(declare-fun betweenR (Int Int Int) Bool)
(declare-fun card@@Int ( (set Int) ) Int)
(declare-fun card@@sl$Addr ( (set sl$Addr) ) Int)
(declare-fun card@@sl$OBJ ( (set sl$OBJ) ) Int)
(declare-fun card@@sl$REQ ( (set sl$REQ) ) Int)
(declare-fun card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             Int)
(declare-fun card@Open@@pfun@@Int@@sl$Addr@Close
             ( (set (pfun Int sl$Addr)) )
             Int)
(declare-fun card@Open@@pfun@@Int@@sl$OBJ@Close
             ( (set (pfun Int sl$OBJ)) )
             Int)
(declare-fun card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close
             ( (set (pfun sl$Addr
                          (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
             Int)
(declare-fun card@Open@@pfun@@sl$REQ@@sl$OBJ@Close
             ( (set (pfun sl$REQ sl$OBJ)) )
             Int)
(declare-fun const@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (Record-item-left-right sl$OBJ sl$Addr sl$Addr) )
             (Array (Record-item-left-right sl$OBJ sl$Addr sl$Addr)
                    (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun dom@@Int@@sl$Addr ( (pfun Int sl$Addr) ) (set Int))
(declare-fun dom@@Int@@sl$OBJ ( (pfun Int sl$OBJ) ) (set Int))
(declare-fun dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             (set sl$Addr))
(declare-fun dom@@sl$REQ@@sl$OBJ
             ( (pfun sl$REQ sl$OBJ) )
             (set sl$REQ))
(declare-fun dom-rest@@Int@@sl$Addr
             ( (set Int)
               (pfun Int sl$Addr) )
             (pfun Int sl$Addr))
(declare-fun dom-rest@@Int@@sl$OBJ
             ( (set Int)
               (pfun Int sl$OBJ) )
             (pfun Int sl$OBJ))
(declare-fun dom-rest@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (set sl$Addr)
               (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             (pfun sl$Addr
                   (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun dom-rest@@sl$REQ@@sl$OBJ
             ( (set sl$REQ)
               (pfun sl$REQ sl$OBJ) )
             (pfun sl$REQ sl$OBJ))
(declare-fun dom-subt@@Int@@sl$Addr
             ( (set Int)
               (pfun Int sl$Addr) )
             (pfun Int sl$Addr))
(declare-fun dom-subt@@Int@@sl$OBJ
             ( (set Int)
               (pfun Int sl$OBJ) )
             (pfun Int sl$OBJ))
(declare-fun dom-subt@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (set sl$Addr)
               (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             (pfun sl$Addr
                   (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun dom-subt@@sl$REQ@@sl$OBJ
             ( (set sl$REQ)
               (pfun sl$REQ sl$OBJ) )
             (pfun sl$REQ sl$OBJ))
(declare-fun empty-fun@@Int@@sl$Addr () (pfun Int sl$Addr))
(declare-fun empty-fun@@Int@@sl$OBJ () (pfun Int sl$OBJ))
(declare-fun empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ()
             (pfun sl$Addr
                   (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun empty-fun@@sl$REQ@@sl$OBJ () (pfun sl$REQ sl$OBJ))
(declare-fun finite@@Int ( (set Int) ) Bool)
(declare-fun finite@@sl$Addr ( (set sl$Addr) ) Bool)
(declare-fun finite@@sl$OBJ ( (set sl$OBJ) ) Bool)
(declare-fun finite@@sl$REQ ( (set sl$REQ) ) Bool)
(declare-fun finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             Bool)
(declare-fun finite@Open@@pfun@@Int@@sl$Addr@Close
             ( (set (pfun Int sl$Addr)) )
             Bool)
(declare-fun finite@Open@@pfun@@Int@@sl$OBJ@Close
             ( (set (pfun Int sl$OBJ)) )
             Bool)
(declare-fun finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close
             ( (set (pfun sl$Addr
                          (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
             Bool)
(declare-fun finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close
             ( (set (pfun sl$REQ sl$OBJ)) )
             Bool)
(declare-fun ident@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ()
             (Array (Record-item-left-right sl$OBJ sl$Addr sl$Addr)
                    (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun injective@@Int@@sl$Addr ( (pfun Int sl$Addr) ) Bool)
(declare-fun injective@@Int@@sl$OBJ ( (pfun Int sl$OBJ) ) Bool)
(declare-fun injective@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             Bool)
(declare-fun injective@@sl$REQ@@sl$OBJ
             ( (pfun sl$REQ sl$OBJ) )
             Bool)
(declare-fun interval (Int Int) (set Int))
(declare-fun intervalL (Int Int) (set Int))
(declare-fun intervalLR (Int Int) (set Int))
(declare-fun intervalR (Int Int) (set Int))
(declare-fun mk-fun@@Int@@sl$Addr
             (Int sl$Addr)
             (pfun Int sl$Addr))
(declare-fun mk-fun@@Int@@sl$OBJ
             (Int sl$OBJ)
             (pfun Int sl$OBJ))
(declare-fun mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             (sl$Addr (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
             (pfun sl$Addr
                   (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun mk-fun@@sl$REQ@@sl$OBJ
             (sl$REQ sl$OBJ)
             (pfun sl$REQ sl$OBJ))
(declare-fun mk-set@@Int (Int) (set Int))
(declare-fun mk-set@@sl$Addr (sl$Addr) (set sl$Addr))
(declare-fun mk-set@@sl$OBJ (sl$OBJ) (set sl$OBJ))
(declare-fun mk-set@@sl$REQ (sl$REQ) (set sl$REQ))
(declare-fun mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (Record-item-left-right sl$OBJ sl$Addr sl$Addr) )
             (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun mk-set@Open@@pfun@@Int@@sl$Addr@Close
             ( (pfun Int sl$Addr) )
             (set (pfun Int sl$Addr)))
(declare-fun mk-set@Open@@pfun@@Int@@sl$OBJ@Close
             ( (pfun Int sl$OBJ) )
             (set (pfun Int sl$OBJ)))
(declare-fun mk-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close
             ( (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             (set (pfun sl$Addr
                        (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
(declare-fun mk-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close
             ( (pfun sl$REQ sl$OBJ) )
             (set (pfun sl$REQ sl$OBJ)))
(declare-fun ovl@@Int@@sl$Addr
             ( (pfun Int sl$Addr)
               (pfun Int sl$Addr) )
             (pfun Int sl$Addr))
(declare-fun ovl@@Int@@sl$OBJ
             ( (pfun Int sl$OBJ)
               (pfun Int sl$OBJ) )
             (pfun Int sl$OBJ))
(declare-fun ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
               (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             (pfun sl$Addr
                   (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun ovl@@sl$REQ@@sl$OBJ
             ( (pfun sl$REQ sl$OBJ)
               (pfun sl$REQ sl$OBJ) )
             (pfun sl$REQ sl$OBJ))
(declare-fun pfun@@Int@@sl$Addr
             ( (set Int)
               (set sl$Addr) )
             (set (pfun Int sl$Addr)))
(declare-fun pfun@@Int@@sl$OBJ
             ( (set Int)
               (set sl$OBJ) )
             (set (pfun Int sl$OBJ)))
(declare-fun pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (set sl$Addr)
               (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             (set (pfun sl$Addr
                        (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
(declare-fun pfun@@sl$REQ@@sl$OBJ
             ( (set sl$REQ)
               (set sl$OBJ) )
             (set (pfun sl$REQ sl$OBJ)))
(declare-fun ran@@Int@@sl$Addr
             ( (pfun Int sl$Addr) )
             (set sl$Addr))
(declare-fun ran@@Int@@sl$OBJ ( (pfun Int sl$OBJ) ) (set sl$OBJ))
(declare-fun ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (pfun sl$Addr
                     (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun ran@@sl$REQ@@sl$OBJ
             ( (pfun sl$REQ sl$OBJ) )
             (set sl$OBJ))
(declare-fun set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
               (Array (Record-item-left-right sl$OBJ sl$Addr sl$Addr)
                      (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(declare-fun tfun@@Int@@sl$Addr
             ( (set Int)
               (set sl$Addr) )
             (set (pfun Int sl$Addr)))
(declare-fun tfun@@Int@@sl$OBJ
             ( (set Int)
               (set sl$OBJ) )
             (set (pfun Int sl$OBJ)))
(declare-fun tfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
             ( (set sl$Addr)
               (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
             (set (pfun sl$Addr
                        (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
(declare-fun tfun@@sl$REQ@@sl$OBJ
             ( (set sl$REQ)
               (set sl$OBJ) )
             (set (pfun sl$REQ sl$OBJ)))
(declare-fun @@lambda@@_0
             ( (set sl$OBJ)
               (set sl$Addr)
               (set sl$Addr) )
             (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
(define-fun Req
            ()
            (set sl$REQ)
            (union (union (union pshL pshR) popL) popR))
(define-fun Req@prime
            ()
            (set sl$REQ)
            (union (union (union pshL@prime pshR@prime) popL@prime)
                   popR@prime))
(define-fun all@@Int () (set Int) ( (as const (set Int)) true ))
(define-fun all@@sl$Addr
            ()
            (set sl$Addr)
            ( (as const (set sl$Addr))
              true ))
(define-fun all@@sl$OBJ
            ()
            (set sl$OBJ)
            ( (as const (set sl$OBJ))
              true ))
(define-fun all@@sl$REQ
            ()
            (set sl$REQ)
            ( (as const (set sl$REQ))
              true ))
(define-fun all@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
            ()
            (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
            ( (as const
                  (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
              true ))
(define-fun all@Open@@pfun@@Int@@sl$Addr@Close
            ()
            (set (pfun Int sl$Addr))
            ( (as const (set (pfun Int sl$Addr)))
              true ))
(define-fun all@Open@@pfun@@Int@@sl$OBJ@Close
            ()
            (set (pfun Int sl$OBJ))
            ( (as const (set (pfun Int sl$OBJ)))
              true ))
(define-fun all@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close
            ()
            (set (pfun sl$Addr
                       (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
            ( (as const
                  (set (pfun sl$Addr
                             (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
              true ))
(define-fun all@Open@@pfun@@sl$REQ@@sl$OBJ@Close
            ()
            (set (pfun sl$REQ sl$OBJ))
            ( (as const (set (pfun sl$REQ sl$OBJ)))
              true ))
(define-fun compl@@Int
            ( (s1 (set Int)) )
            (set Int)
            ( (_ map not)
              s1 ))
(define-fun compl@@sl$Addr
            ( (s1 (set sl$Addr)) )
            (set sl$Addr)
            ( (_ map not)
              s1 ))
(define-fun compl@@sl$OBJ
            ( (s1 (set sl$OBJ)) )
            (set sl$OBJ)
            ( (_ map not)
              s1 ))
(define-fun compl@@sl$REQ
            ( (s1 (set sl$REQ)) )
            (set sl$REQ)
            ( (_ map not)
              s1 ))
(define-fun compl@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
            ( (s1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
            (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
            ( (_ map not)
              s1 ))
(define-fun compl@Open@@pfun@@Int@@sl$Addr@Close
            ( (s1 (set (pfun Int sl$Addr))) )
            (set (pfun Int sl$Addr))
            ( (_ map not)
              s1 ))
(define-fun compl@Open@@pfun@@Int@@sl$OBJ@Close
            ( (s1 (set (pfun Int sl$OBJ))) )
            (set (pfun Int sl$OBJ))
            ( (_ map not)
              s1 ))
(define-fun compl@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close
            ( (s1 (set (pfun sl$Addr
                             (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
            (set (pfun sl$Addr
                       (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
            ( (_ map not)
              s1 ))
(define-fun compl@Open@@pfun@@sl$REQ@@sl$OBJ@Close
            ( (s1 (set (pfun sl$REQ sl$OBJ))) )
            (set (pfun sl$REQ sl$OBJ))
            ( (_ map not)
              s1 ))
(define-fun elem@@Int
            ( (x Int)
              (s1 (set Int)) )
            Bool
            (select s1 x))
(define-fun elem@@sl$Addr
            ( (x sl$Addr)
              (s1 (set sl$Addr)) )
            Bool
            (select s1 x))
(define-fun elem@@sl$OBJ
            ( (x sl$OBJ)
              (s1 (set sl$OBJ)) )
            Bool
            (select s1 x))
(define-fun elem@@sl$REQ
            ( (x sl$REQ)
              (s1 (set sl$REQ)) )
            Bool
            (select s1 x))
(define-fun elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
            ( (x (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
              (s1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
            Bool
            (select s1 x))
(define-fun elem@Open@@pfun@@Int@@sl$Addr@Close
            ( (x (pfun Int sl$Addr))
              (s1 (set (pfun Int sl$Addr))) )
            Bool
            (select s1 x))
(define-fun elem@Open@@pfun@@Int@@sl$OBJ@Close
            ( (x (pfun Int sl$OBJ))
              (s1 (set (pfun Int sl$OBJ))) )
            Bool
            (select s1 x))
(define-fun elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close
            ( (x (pfun sl$Addr
                       (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
              (s1 (set (pfun sl$Addr
                             (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
            Bool
            (select s1 x))
(define-fun elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close
            ( (x (pfun sl$REQ sl$OBJ))
              (s1 (set (pfun sl$REQ sl$OBJ))) )
            Bool
            (select s1 x))
(define-fun empty-set@@Int
            ()
            (set Int)
            ( (as const (set Int))
              false ))
(define-fun empty-set@@sl$Addr
            ()
            (set sl$Addr)
            ( (as const (set sl$Addr))
              false ))
(define-fun empty-set@@sl$OBJ
            ()
            (set sl$OBJ)
            ( (as const (set sl$OBJ))
              false ))
(define-fun empty-set@@sl$REQ
            ()
            (set sl$REQ)
            ( (as const (set sl$REQ))
              false ))
(define-fun empty-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
            ()
            (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
            ( (as const
                  (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
              false ))
(define-fun empty-set@Open@@pfun@@Int@@sl$Addr@Close
            ()
            (set (pfun Int sl$Addr))
            ( (as const (set (pfun Int sl$Addr)))
              false ))
(define-fun empty-set@Open@@pfun@@Int@@sl$OBJ@Close
            ()
            (set (pfun Int sl$OBJ))
            ( (as const (set (pfun Int sl$OBJ)))
              false ))
(define-fun empty-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close
            ()
            (set (pfun sl$Addr
                       (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
            ( (as const
                  (set (pfun sl$Addr
                             (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
              false ))
(define-fun empty-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close
            ()
            (set (pfun sl$REQ sl$OBJ))
            ( (as const (set (pfun sl$REQ sl$OBJ)))
              false ))
(define-fun set-diff@@Int
            ( (s1 (set Int))
              (s2 (set Int)) )
            (set Int)
            (intersect s1 ( (_ map not) s2 )))
(define-fun set-diff@@sl$Addr
            ( (s1 (set sl$Addr))
              (s2 (set sl$Addr)) )
            (set sl$Addr)
            (intersect s1 ( (_ map not) s2 )))
(define-fun set-diff@@sl$OBJ
            ( (s1 (set sl$OBJ))
              (s2 (set sl$OBJ)) )
            (set sl$OBJ)
            (intersect s1 ( (_ map not) s2 )))
(define-fun set-diff@@sl$REQ
            ( (s1 (set sl$REQ))
              (s2 (set sl$REQ)) )
            (set sl$REQ)
            (intersect s1 ( (_ map not) s2 )))
(define-fun set-diff@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
            ( (s1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
              (s2 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
            (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
            (intersect s1 ( (_ map not) s2 )))
(define-fun set-diff@Open@@pfun@@Int@@sl$Addr@Close
            ( (s1 (set (pfun Int sl$Addr)))
              (s2 (set (pfun Int sl$Addr))) )
            (set (pfun Int sl$Addr))
            (intersect s1 ( (_ map not) s2 )))
(define-fun set-diff@Open@@pfun@@Int@@sl$OBJ@Close
            ( (s1 (set (pfun Int sl$OBJ)))
              (s2 (set (pfun Int sl$OBJ))) )
            (set (pfun Int sl$OBJ))
            (intersect s1 ( (_ map not) s2 )))
(define-fun set-diff@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close
            ( (s1 (set (pfun sl$Addr
                             (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
              (s2 (set (pfun sl$Addr
                             (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
            (set (pfun sl$Addr
                       (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
            (intersect s1 ( (_ map not) s2 )))
(define-fun set-diff@Open@@pfun@@sl$REQ@@sl$OBJ@Close
            ( (s1 (set (pfun sl$REQ sl$OBJ)))
              (s2 (set (pfun sl$REQ sl$OBJ))) )
            (set (pfun sl$REQ sl$OBJ))
            (intersect s1 ( (_ map not) s2 )))
(define-fun st-subset@@Int
            ( (s1 (set Int))
              (s2 (set Int)) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun st-subset@@sl$Addr
            ( (s1 (set sl$Addr))
              (s2 (set sl$Addr)) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun st-subset@@sl$OBJ
            ( (s1 (set sl$OBJ))
              (s2 (set sl$OBJ)) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun st-subset@@sl$REQ
            ( (s1 (set sl$REQ))
              (s2 (set sl$REQ)) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun st-subset@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
            ( (s1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
              (s2 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun st-subset@Open@@pfun@@Int@@sl$Addr@Close
            ( (s1 (set (pfun Int sl$Addr)))
              (s2 (set (pfun Int sl$Addr))) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun st-subset@Open@@pfun@@Int@@sl$OBJ@Close
            ( (s1 (set (pfun Int sl$OBJ)))
              (s2 (set (pfun Int sl$OBJ))) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun st-subset@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close
            ( (s1 (set (pfun sl$Addr
                             (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
              (s2 (set (pfun sl$Addr
                             (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun st-subset@Open@@pfun@@sl$REQ@@sl$OBJ@Close
            ( (s1 (set (pfun sl$REQ sl$OBJ)))
              (s2 (set (pfun sl$REQ sl$OBJ))) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(define-fun sl$Addr
            ()
            (set sl$Addr)
            ( (as const (set sl$Addr))
              true ))
(define-fun sl$OBJ
            ()
            (set sl$OBJ)
            ( (as const (set sl$OBJ))
              true ))
(define-fun sl$REQ
            ()
            (set sl$REQ)
            ( (as const (set sl$REQ))
              true ))
(define-fun Node@prime
            ()
            (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
            (set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (@@lambda@@_0 sl$OBJ sl$Addr sl$Addr)
                                                                                                                                           ident@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close))
(define-fun Node
            ()
            (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
            (set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (@@lambda@@_0 sl$OBJ sl$Addr sl$Addr)
                                                                                                                                           ident@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close))
(assert (forall ( (r (set Int)) )
                (! (=> (finite@@Int r) (<= 0 (card@@Int r)))
                   :pattern
                   ( (<= 0 (card@@Int r)) ))))
(assert (forall ( (r (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (=> (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r)
                       (<= 0
                           (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r)))
                   :pattern
                   ( (<= 0
                         (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r)) ))))
(assert (forall ( (r (set (pfun Int sl$Addr))) )
                (! (=> (finite@Open@@pfun@@Int@@sl$Addr@Close r)
                       (<= 0 (card@Open@@pfun@@Int@@sl$Addr@Close r)))
                   :pattern
                   ( (<= 0 (card@Open@@pfun@@Int@@sl$Addr@Close r)) ))))
(assert (forall ( (r (set (pfun Int sl$OBJ))) )
                (! (=> (finite@Open@@pfun@@Int@@sl$OBJ@Close r)
                       (<= 0 (card@Open@@pfun@@Int@@sl$OBJ@Close r)))
                   :pattern
                   ( (<= 0 (card@Open@@pfun@@Int@@sl$OBJ@Close r)) ))))
(assert (forall ( (r (set (pfun sl$Addr
                                (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
                (! (=> (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close r)
                       (<= 0
                           (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close r)))
                   :pattern
                   ( (<= 0
                         (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close r)) ))))
(assert (forall ( (r (set (pfun sl$REQ sl$OBJ))) )
                (! (=> (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close r)
                       (<= 0 (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close r)))
                   :pattern
                   ( (<= 0 (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close r)) ))))
(assert (forall ( (r (set sl$Addr)) )
                (! (=> (finite@@sl$Addr r) (<= 0 (card@@sl$Addr r)))
                   :pattern
                   ( (<= 0 (card@@sl$Addr r)) ))))
(assert (forall ( (r (set sl$OBJ)) )
                (! (=> (finite@@sl$OBJ r) (<= 0 (card@@sl$OBJ r)))
                   :pattern
                   ( (<= 0 (card@@sl$OBJ r)) ))))
(assert (forall ( (r (set sl$REQ)) )
                (! (=> (finite@@sl$REQ r) (<= 0 (card@@sl$REQ r)))
                   :pattern
                   ( (<= 0 (card@@sl$REQ r)) ))))
(assert (forall ( (r (set Int)) )
                (! (= (= (card@@Int r) 0) (= r empty-set@@Int))
                   :pattern
                   ( (card@@Int r) ))))
(assert (forall ( (r (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (= (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r)
                         0)
                      (= r
                         empty-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close))
                   :pattern
                   ( (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r) ))))
(assert (forall ( (r (set (pfun Int sl$Addr))) )
                (! (= (= (card@Open@@pfun@@Int@@sl$Addr@Close r) 0)
                      (= r empty-set@Open@@pfun@@Int@@sl$Addr@Close))
                   :pattern
                   ( (card@Open@@pfun@@Int@@sl$Addr@Close r) ))))
(assert (forall ( (r (set (pfun Int sl$OBJ))) )
                (! (= (= (card@Open@@pfun@@Int@@sl$OBJ@Close r) 0)
                      (= r empty-set@Open@@pfun@@Int@@sl$OBJ@Close))
                   :pattern
                   ( (card@Open@@pfun@@Int@@sl$OBJ@Close r) ))))
(assert (forall ( (r (set (pfun sl$Addr
                                (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
                (! (= (= (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close r)
                         0)
                      (= r
                         empty-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close))
                   :pattern
                   ( (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close r) ))))
(assert (forall ( (r (set (pfun sl$REQ sl$OBJ))) )
                (! (= (= (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close r) 0)
                      (= r empty-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close))
                   :pattern
                   ( (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close r) ))))
(assert (forall ( (r (set sl$Addr)) )
                (! (= (= (card@@sl$Addr r) 0) (= r empty-set@@sl$Addr))
                   :pattern
                   ( (card@@sl$Addr r) ))))
(assert (forall ( (r (set sl$OBJ)) )
                (! (= (= (card@@sl$OBJ r) 0) (= r empty-set@@sl$OBJ))
                   :pattern
                   ( (card@@sl$OBJ r) ))))
(assert (forall ( (r (set sl$REQ)) )
                (! (= (= (card@@sl$REQ r) 0) (= r empty-set@@sl$REQ))
                   :pattern
                   ( (card@@sl$REQ r) ))))
(assert (forall ( (x Int) )
                (! (= (card@@Int (mk-set@@Int x)) 1)
                   :pattern
                   ( (card@@Int (mk-set@@Int x)) ))))
(assert (forall ( (x (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x))
                      1)
                   :pattern
                   ( (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x)) ))))
(assert (forall ( (x (pfun Int sl$Addr)) )
                (! (= (card@Open@@pfun@@Int@@sl$Addr@Close (mk-set@Open@@pfun@@Int@@sl$Addr@Close x))
                      1)
                   :pattern
                   ( (card@Open@@pfun@@Int@@sl$Addr@Close (mk-set@Open@@pfun@@Int@@sl$Addr@Close x)) ))))
(assert (forall ( (x (pfun Int sl$OBJ)) )
                (! (= (card@Open@@pfun@@Int@@sl$OBJ@Close (mk-set@Open@@pfun@@Int@@sl$OBJ@Close x))
                      1)
                   :pattern
                   ( (card@Open@@pfun@@Int@@sl$OBJ@Close (mk-set@Open@@pfun@@Int@@sl$OBJ@Close x)) ))))
(assert (forall ( (x (pfun sl$Addr
                           (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (mk-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close x))
                      1)
                   :pattern
                   ( (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (mk-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close x)) ))))
(assert (forall ( (x (pfun sl$REQ sl$OBJ)) )
                (! (= (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close (mk-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close x))
                      1)
                   :pattern
                   ( (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close (mk-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close x)) ))))
(assert (forall ( (x sl$Addr) )
                (! (= (card@@sl$Addr (mk-set@@sl$Addr x)) 1)
                   :pattern
                   ( (card@@sl$Addr (mk-set@@sl$Addr x)) ))))
(assert (forall ( (x sl$OBJ) )
                (! (= (card@@sl$OBJ (mk-set@@sl$OBJ x)) 1)
                   :pattern
                   ( (card@@sl$OBJ (mk-set@@sl$OBJ x)) ))))
(assert (forall ( (x sl$REQ) )
                (! (= (card@@sl$REQ (mk-set@@sl$REQ x)) 1)
                   :pattern
                   ( (card@@sl$REQ (mk-set@@sl$REQ x)) ))))
(assert (forall ( (r (set Int)) )
                (! (= (= (card@@Int r) 1)
                      (exists ( (x Int) ) (and true (= r (mk-set@@Int x)))))
                   :pattern
                   ( (card@@Int r) ))))
(assert (forall ( (r (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (= (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r)
                         1)
                      (exists ( (x (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                              (and true
                                   (= r
                                      (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x)))))
                   :pattern
                   ( (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r) ))))
(assert (forall ( (r (set (pfun Int sl$Addr))) )
                (! (= (= (card@Open@@pfun@@Int@@sl$Addr@Close r) 1)
                      (exists ( (x (pfun Int sl$Addr)) )
                              (and true
                                   (= r (mk-set@Open@@pfun@@Int@@sl$Addr@Close x)))))
                   :pattern
                   ( (card@Open@@pfun@@Int@@sl$Addr@Close r) ))))
(assert (forall ( (r (set (pfun Int sl$OBJ))) )
                (! (= (= (card@Open@@pfun@@Int@@sl$OBJ@Close r) 1)
                      (exists ( (x (pfun Int sl$OBJ)) )
                              (and true
                                   (= r (mk-set@Open@@pfun@@Int@@sl$OBJ@Close x)))))
                   :pattern
                   ( (card@Open@@pfun@@Int@@sl$OBJ@Close r) ))))
(assert (forall ( (r (set (pfun sl$Addr
                                (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
                (! (= (= (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close r)
                         1)
                      (exists ( (x (pfun sl$Addr
                                         (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                              (and true
                                   (= r
                                      (mk-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close x)))))
                   :pattern
                   ( (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close r) ))))
(assert (forall ( (r (set (pfun sl$REQ sl$OBJ))) )
                (! (= (= (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close r) 1)
                      (exists ( (x (pfun sl$REQ sl$OBJ)) )
                              (and true
                                   (= r (mk-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close x)))))
                   :pattern
                   ( (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close r) ))))
(assert (forall ( (r (set sl$Addr)) )
                (! (= (= (card@@sl$Addr r) 1)
                      (exists ( (x sl$Addr) )
                              (and true (= r (mk-set@@sl$Addr x)))))
                   :pattern
                   ( (card@@sl$Addr r) ))))
(assert (forall ( (r (set sl$OBJ)) )
                (! (= (= (card@@sl$OBJ r) 1)
                      (exists ( (x sl$OBJ) ) (and true (= r (mk-set@@sl$OBJ x)))))
                   :pattern
                   ( (card@@sl$OBJ r) ))))
(assert (forall ( (r (set sl$REQ)) )
                (! (= (= (card@@sl$REQ r) 1)
                      (exists ( (x sl$REQ) ) (and true (= r (mk-set@@sl$REQ x)))))
                   :pattern
                   ( (card@@sl$REQ r) ))))
(assert (forall ( (r (set Int))
                  (r0 (set Int)) )
                (! (=> (= (intersect r r0) empty-set@@Int)
                       (= (card@@Int (union r r0))
                          (+ (card@@Int r) (card@@Int r0))))
                   :pattern
                   ( (card@@Int (union r r0)) ))))
(assert (forall ( (r (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (r0 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (=> (= (intersect r r0)
                          empty-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close)
                       (= (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (union r r0))
                          (+ (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r)
                             (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r0))))
                   :pattern
                   ( (card@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (union r r0)) ))))
(assert (forall ( (r (set (pfun Int sl$Addr)))
                  (r0 (set (pfun Int sl$Addr))) )
                (! (=> (= (intersect r r0)
                          empty-set@Open@@pfun@@Int@@sl$Addr@Close)
                       (= (card@Open@@pfun@@Int@@sl$Addr@Close (union r r0))
                          (+ (card@Open@@pfun@@Int@@sl$Addr@Close r)
                             (card@Open@@pfun@@Int@@sl$Addr@Close r0))))
                   :pattern
                   ( (card@Open@@pfun@@Int@@sl$Addr@Close (union r r0)) ))))
(assert (forall ( (r (set (pfun Int sl$OBJ)))
                  (r0 (set (pfun Int sl$OBJ))) )
                (! (=> (= (intersect r r0)
                          empty-set@Open@@pfun@@Int@@sl$OBJ@Close)
                       (= (card@Open@@pfun@@Int@@sl$OBJ@Close (union r r0))
                          (+ (card@Open@@pfun@@Int@@sl$OBJ@Close r)
                             (card@Open@@pfun@@Int@@sl$OBJ@Close r0))))
                   :pattern
                   ( (card@Open@@pfun@@Int@@sl$OBJ@Close (union r r0)) ))))
(assert (forall ( (r (set (pfun sl$Addr
                                (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
                  (r0 (set (pfun sl$Addr
                                 (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
                (! (=> (= (intersect r r0)
                          empty-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close)
                       (= (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (union r r0))
                          (+ (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close r)
                             (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close r0))))
                   :pattern
                   ( (card@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (union r r0)) ))))
(assert (forall ( (r (set (pfun sl$REQ sl$OBJ)))
                  (r0 (set (pfun sl$REQ sl$OBJ))) )
                (! (=> (= (intersect r r0)
                          empty-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close)
                       (= (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close (union r r0))
                          (+ (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close r)
                             (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close r0))))
                   :pattern
                   ( (card@Open@@pfun@@sl$REQ@@sl$OBJ@Close (union r r0)) ))))
(assert (forall ( (r (set sl$Addr))
                  (r0 (set sl$Addr)) )
                (! (=> (= (intersect r r0) empty-set@@sl$Addr)
                       (= (card@@sl$Addr (union r r0))
                          (+ (card@@sl$Addr r) (card@@sl$Addr r0))))
                   :pattern
                   ( (card@@sl$Addr (union r r0)) ))))
(assert (forall ( (r (set sl$OBJ))
                  (r0 (set sl$OBJ)) )
                (! (=> (= (intersect r r0) empty-set@@sl$OBJ)
                       (= (card@@sl$OBJ (union r r0))
                          (+ (card@@sl$OBJ r) (card@@sl$OBJ r0))))
                   :pattern
                   ( (card@@sl$OBJ (union r r0)) ))))
(assert (forall ( (r (set sl$REQ))
                  (r0 (set sl$REQ)) )
                (! (=> (= (intersect r r0) empty-set@@sl$REQ)
                       (= (card@@sl$REQ (union r r0))
                          (+ (card@@sl$REQ r) (card@@sl$REQ r0))))
                   :pattern
                   ( (card@@sl$REQ (union r r0)) ))))
(assert (forall ( (x (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (select (const@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x)
                              y)
                      x)
                   :pattern
                   ( (select (const@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x)
                             y) ))))
(assert (forall ( (x (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (select ident@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
                              x)
                      x)
                   :pattern
                   ( (select ident@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
                             x) ))))
(assert (= (dom@@Int@@sl$Addr empty-fun@@Int@@sl$Addr)
           empty-set@@Int))
(assert (= (dom@@Int@@sl$OBJ empty-fun@@Int@@sl$OBJ)
           empty-set@@Int))
(assert (= (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close)
           empty-set@@sl$Addr))
(assert (= (dom@@sl$REQ@@sl$OBJ empty-fun@@sl$REQ@@sl$OBJ)
           empty-set@@sl$REQ))
(assert (forall ( (f1 (pfun Int sl$Addr)) )
                (! (= (ovl@@Int@@sl$Addr f1 empty-fun@@Int@@sl$Addr) f1)
                   :pattern
                   ( (ovl@@Int@@sl$Addr f1 empty-fun@@Int@@sl$Addr) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ)) )
                (! (= (ovl@@Int@@sl$OBJ f1 empty-fun@@Int@@sl$OBJ) f1)
                   :pattern
                   ( (ovl@@Int@@sl$OBJ f1 empty-fun@@Int@@sl$OBJ) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                 empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close)
                      f1)
                   :pattern
                   ( (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ)) )
                (! (= (ovl@@sl$REQ@@sl$OBJ f1 empty-fun@@sl$REQ@@sl$OBJ)
                      f1)
                   :pattern
                   ( (ovl@@sl$REQ@@sl$OBJ f1 empty-fun@@sl$REQ@@sl$OBJ) ))))
(assert (forall ( (f1 (pfun Int sl$Addr)) )
                (! (= (ovl@@Int@@sl$Addr empty-fun@@Int@@sl$Addr f1) f1)
                   :pattern
                   ( (ovl@@Int@@sl$Addr empty-fun@@Int@@sl$Addr f1) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ)) )
                (! (= (ovl@@Int@@sl$OBJ empty-fun@@Int@@sl$OBJ f1) f1)
                   :pattern
                   ( (ovl@@Int@@sl$OBJ empty-fun@@Int@@sl$OBJ f1) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
                                                                                                 f1)
                      f1)
                   :pattern
                   ( (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
                                                                                                f1) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ)) )
                (! (= (ovl@@sl$REQ@@sl$OBJ empty-fun@@sl$REQ@@sl$OBJ f1)
                      f1)
                   :pattern
                   ( (ovl@@sl$REQ@@sl$OBJ empty-fun@@sl$REQ@@sl$OBJ f1) ))))
(assert (forall ( (x Int)
                  (y sl$Addr) )
                (! (= (dom@@Int@@sl$Addr (mk-fun@@Int@@sl$Addr x y))
                      (mk-set@@Int x))
                   :pattern
                   ( (dom@@Int@@sl$Addr (mk-fun@@Int@@sl$Addr x y)) ))))
(assert (forall ( (x Int)
                  (y sl$OBJ) )
                (! (= (dom@@Int@@sl$OBJ (mk-fun@@Int@@sl$OBJ x y))
                      (mk-set@@Int x))
                   :pattern
                   ( (dom@@Int@@sl$OBJ (mk-fun@@Int@@sl$OBJ x y)) ))))
(assert (forall ( (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y))
                      (mk-set@@sl$Addr x))
                   :pattern
                   ( (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y)) ))))
(assert (forall ( (x sl$REQ)
                  (y sl$OBJ) )
                (! (= (dom@@sl$REQ@@sl$OBJ (mk-fun@@sl$REQ@@sl$OBJ x y))
                      (mk-set@@sl$REQ x))
                   :pattern
                   ( (dom@@sl$REQ@@sl$OBJ (mk-fun@@sl$REQ@@sl$OBJ x y)) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (f2 (pfun Int sl$Addr))
                  (x Int) )
                (! (=> (elem@@Int x (dom@@Int@@sl$Addr f2))
                       (= (apply@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 f2) x)
                          (apply@@Int@@sl$Addr f2 x)))
                   :pattern
                   ( (apply@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 f2) x) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (f2 (pfun Int sl$OBJ))
                  (x Int) )
                (! (=> (elem@@Int x (dom@@Int@@sl$OBJ f2))
                       (= (apply@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 f2) x)
                          (apply@@Int@@sl$OBJ f2 x)))
                   :pattern
                   ( (apply@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 f2) x) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (f2 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr) )
                (! (=> (elem@@sl$Addr x
                                      (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f2))
                       (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 f2)
                                                                                                       x)
                          (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f2 x)))
                   :pattern
                   ( (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 f2)
                                                                                                  x) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (f2 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ) )
                (! (=> (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f2))
                       (= (apply@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 f2) x)
                          (apply@@sl$REQ@@sl$OBJ f2 x)))
                   :pattern
                   ( (apply@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 f2) x) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (f2 (pfun Int sl$Addr))
                  (x Int) )
                (! (=> (and (elem@@Int x (dom@@Int@@sl$Addr f1))
                            (not (elem@@Int x (dom@@Int@@sl$Addr f2))))
                       (= (apply@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 f2) x)
                          (apply@@Int@@sl$Addr f1 x)))
                   :pattern
                   ( (apply@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 f2) x) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (f2 (pfun Int sl$OBJ))
                  (x Int) )
                (! (=> (and (elem@@Int x (dom@@Int@@sl$OBJ f1))
                            (not (elem@@Int x (dom@@Int@@sl$OBJ f2))))
                       (= (apply@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 f2) x)
                          (apply@@Int@@sl$OBJ f1 x)))
                   :pattern
                   ( (apply@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 f2) x) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (f2 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr) )
                (! (=> (and (elem@@sl$Addr x
                                           (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                            (not (elem@@sl$Addr x
                                                (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f2))))
                       (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 f2)
                                                                                                       x)
                          (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)))
                   :pattern
                   ( (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 f2)
                                                                                                  x) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (f2 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ) )
                (! (=> (and (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                            (not (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f2))))
                       (= (apply@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 f2) x)
                          (apply@@sl$REQ@@sl$OBJ f1 x)))
                   :pattern
                   ( (apply@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 f2) x) ))))
(assert (forall ( (x Int)
                  (y sl$Addr) )
                (! (= (apply@@Int@@sl$Addr (mk-fun@@Int@@sl$Addr x y) x)
                      y)
                   :pattern
                   ( (apply@@Int@@sl$Addr (mk-fun@@Int@@sl$Addr x y) x) ))))
(assert (forall ( (x Int)
                  (y sl$OBJ) )
                (! (= (apply@@Int@@sl$OBJ (mk-fun@@Int@@sl$OBJ x y) x)
                      y)
                   :pattern
                   ( (apply@@Int@@sl$OBJ (mk-fun@@Int@@sl$OBJ x y) x) ))))
(assert (forall ( (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y)
                                                                                                   x)
                      y)
                   :pattern
                   ( (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y)
                                                                                                  x) ))))
(assert (forall ( (x sl$REQ)
                  (y sl$OBJ) )
                (! (= (apply@@sl$REQ@@sl$OBJ (mk-fun@@sl$REQ@@sl$OBJ x y) x)
                      y)
                   :pattern
                   ( (apply@@sl$REQ@@sl$OBJ (mk-fun@@sl$REQ@@sl$OBJ x y) x) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (and (elem@@Int x s1)
                            (elem@@Int x (dom@@Int@@sl$Addr f1)))
                       (= (apply@@Int@@sl$Addr (dom-rest@@Int@@sl$Addr s1 f1) x)
                          (apply@@Int@@sl$Addr f1 x)))
                   :pattern
                   ( (apply@@Int@@sl$Addr (dom-rest@@Int@@sl$Addr s1 f1) x) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (and (elem@@Int x s1)
                            (elem@@Int x (dom@@Int@@sl$OBJ f1)))
                       (= (apply@@Int@@sl$OBJ (dom-rest@@Int@@sl$OBJ s1 f1) x)
                          (apply@@Int@@sl$OBJ f1 x)))
                   :pattern
                   ( (apply@@Int@@sl$OBJ (dom-rest@@Int@@sl$OBJ s1 f1) x) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s1 (set sl$Addr))
                  (x sl$Addr) )
                (! (=> (and (elem@@sl$Addr x s1)
                            (elem@@sl$Addr x
                                           (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)))
                       (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-rest@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1)
                                                                                                       x)
                          (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)))
                   :pattern
                   ( (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-rest@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1)
                                                                                                  x) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (s1 (set sl$REQ))
                  (x sl$REQ) )
                (! (=> (and (elem@@sl$REQ x s1)
                            (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1)))
                       (= (apply@@sl$REQ@@sl$OBJ (dom-rest@@sl$REQ@@sl$OBJ s1 f1) x)
                          (apply@@sl$REQ@@sl$OBJ f1 x)))
                   :pattern
                   ( (apply@@sl$REQ@@sl$OBJ (dom-rest@@sl$REQ@@sl$OBJ s1 f1) x) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (elem@@Int x (set-diff@@Int (dom@@Int@@sl$Addr f1) s1))
                       (= (apply@@Int@@sl$Addr (dom-subt@@Int@@sl$Addr s1 f1) x)
                          (apply@@Int@@sl$Addr f1 x)))
                   :pattern
                   ( (apply@@Int@@sl$Addr (dom-subt@@Int@@sl$Addr s1 f1) x) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (elem@@Int x (set-diff@@Int (dom@@Int@@sl$OBJ f1) s1))
                       (= (apply@@Int@@sl$OBJ (dom-subt@@Int@@sl$OBJ s1 f1) x)
                          (apply@@Int@@sl$OBJ f1 x)))
                   :pattern
                   ( (apply@@Int@@sl$OBJ (dom-subt@@Int@@sl$OBJ s1 f1) x) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s1 (set sl$Addr))
                  (x sl$Addr) )
                (! (=> (elem@@sl$Addr x
                                      (set-diff@@sl$Addr (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                                                         s1))
                       (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-subt@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1)
                                                                                                       x)
                          (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)))
                   :pattern
                   ( (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-subt@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1)
                                                                                                  x) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (s1 (set sl$REQ))
                  (x sl$REQ) )
                (! (=> (elem@@sl$REQ x (set-diff@@sl$REQ (dom@@sl$REQ@@sl$OBJ f1) s1))
                       (= (apply@@sl$REQ@@sl$OBJ (dom-subt@@sl$REQ@@sl$OBJ s1 f1) x)
                          (apply@@sl$REQ@@sl$OBJ f1 x)))
                   :pattern
                   ( (apply@@sl$REQ@@sl$OBJ (dom-subt@@sl$REQ@@sl$OBJ s1 f1) x) ))))
(assert (forall ( (s2 (set sl$Addr)) )
                (! (elem@Open@@pfun@@Int@@sl$Addr@Close empty-fun@@Int@@sl$Addr
                                                        (tfun@@Int@@sl$Addr empty-set@@Int s2))
                   :pattern
                   ( (elem@Open@@pfun@@Int@@sl$Addr@Close empty-fun@@Int@@sl$Addr
                                                          (tfun@@Int@@sl$Addr empty-set@@Int s2)) ))))
(assert (forall ( (s2 (set sl$OBJ)) )
                (! (elem@Open@@pfun@@Int@@sl$OBJ@Close empty-fun@@Int@@sl$OBJ
                                                       (tfun@@Int@@sl$OBJ empty-set@@Int s2))
                   :pattern
                   ( (elem@Open@@pfun@@Int@@sl$OBJ@Close empty-fun@@Int@@sl$OBJ
                                                         (tfun@@Int@@sl$OBJ empty-set@@Int s2)) ))))
(assert (forall ( (s2 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
                                                                                                                (tfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close empty-set@@sl$Addr s2))
                   :pattern
                   ( (elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close
                                                                                                                  (tfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close empty-set@@sl$Addr s2)) ))))
(assert (forall ( (s2 (set sl$OBJ)) )
                (! (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close empty-fun@@sl$REQ@@sl$OBJ
                                                          (tfun@@sl$REQ@@sl$OBJ empty-set@@sl$REQ s2))
                   :pattern
                   ( (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close empty-fun@@sl$REQ@@sl$OBJ
                                                            (tfun@@sl$REQ@@sl$OBJ empty-set@@sl$REQ s2)) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (f2 (pfun Int sl$Addr)) )
                (! (= (dom@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 f2))
                      (union (dom@@Int@@sl$Addr f1) (dom@@Int@@sl$Addr f2)))
                   :pattern
                   ( (dom@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 f2)) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (f2 (pfun Int sl$OBJ)) )
                (! (= (dom@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 f2))
                      (union (dom@@Int@@sl$OBJ f1) (dom@@Int@@sl$OBJ f2)))
                   :pattern
                   ( (dom@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 f2)) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (f2 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 f2))
                      (union (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                             (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f2)))
                   :pattern
                   ( (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 f2)) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (f2 (pfun sl$REQ sl$OBJ)) )
                (! (= (dom@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 f2))
                      (union (dom@@sl$REQ@@sl$OBJ f1) (dom@@sl$REQ@@sl$OBJ f2)))
                   :pattern
                   ( (dom@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 f2)) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (s1 (set Int)) )
                (! (= (dom@@Int@@sl$Addr (dom-rest@@Int@@sl$Addr s1 f1))
                      (intersect s1 (dom@@Int@@sl$Addr f1)))
                   :pattern
                   ( (dom@@Int@@sl$Addr (dom-rest@@Int@@sl$Addr s1 f1)) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (s1 (set Int)) )
                (! (= (dom@@Int@@sl$OBJ (dom-rest@@Int@@sl$OBJ s1 f1))
                      (intersect s1 (dom@@Int@@sl$OBJ f1)))
                   :pattern
                   ( (dom@@Int@@sl$OBJ (dom-rest@@Int@@sl$OBJ s1 f1)) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s1 (set sl$Addr)) )
                (! (= (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-rest@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1))
                      (intersect s1
                                 (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)))
                   :pattern
                   ( (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-rest@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1)) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (s1 (set sl$REQ)) )
                (! (= (dom@@sl$REQ@@sl$OBJ (dom-rest@@sl$REQ@@sl$OBJ s1 f1))
                      (intersect s1 (dom@@sl$REQ@@sl$OBJ f1)))
                   :pattern
                   ( (dom@@sl$REQ@@sl$OBJ (dom-rest@@sl$REQ@@sl$OBJ s1 f1)) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (s1 (set Int)) )
                (! (= (dom@@Int@@sl$Addr (dom-subt@@Int@@sl$Addr s1 f1))
                      (set-diff@@Int (dom@@Int@@sl$Addr f1) s1))
                   :pattern
                   ( (dom@@Int@@sl$Addr (dom-subt@@Int@@sl$Addr s1 f1)) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (s1 (set Int)) )
                (! (= (dom@@Int@@sl$OBJ (dom-subt@@Int@@sl$OBJ s1 f1))
                      (set-diff@@Int (dom@@Int@@sl$OBJ f1) s1))
                   :pattern
                   ( (dom@@Int@@sl$OBJ (dom-subt@@Int@@sl$OBJ s1 f1)) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s1 (set sl$Addr)) )
                (! (= (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-subt@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1))
                      (set-diff@@sl$Addr (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                                         s1))
                   :pattern
                   ( (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-subt@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1)) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (s1 (set sl$REQ)) )
                (! (= (dom@@sl$REQ@@sl$OBJ (dom-subt@@sl$REQ@@sl$OBJ s1 f1))
                      (set-diff@@sl$REQ (dom@@sl$REQ@@sl$OBJ f1) s1))
                   :pattern
                   ( (dom@@sl$REQ@@sl$OBJ (dom-subt@@sl$REQ@@sl$OBJ s1 f1)) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (x Int)
                  (y sl$Addr) )
                (! (= (and (elem@@Int x (dom@@Int@@sl$Addr f1))
                           (= (apply@@Int@@sl$Addr f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@Int x (dom@@Int@@sl$Addr f1))
                     (apply@@Int@@sl$Addr f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (x Int)
                  (y sl$Addr) )
                (! (= (and (elem@@Int x (dom@@Int@@sl$Addr f1))
                           (= (apply@@Int@@sl$Addr f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@Int x (dom@@Int@@sl$Addr f1))
                     (apply@@Int@@sl$Addr f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (x Int)
                  (y sl$Addr) )
                (! (= (and (elem@@Int x (dom@@Int@@sl$Addr f1))
                           (= (apply@@Int@@sl$Addr f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@Int x (dom@@Int@@sl$Addr f1))
                     (apply@@Int@@sl$Addr f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (x Int)
                  (y sl$Addr) )
                (! (= (and (elem@@Int x (dom@@Int@@sl$Addr f1))
                           (= (apply@@Int@@sl$Addr f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@Int x (dom@@Int@@sl$Addr f1))
                     (apply@@Int@@sl$Addr f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (x Int)
                  (y sl$OBJ) )
                (! (= (and (elem@@Int x (dom@@Int@@sl$OBJ f1))
                           (= (apply@@Int@@sl$OBJ f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@Int x (dom@@Int@@sl$OBJ f1))
                     (apply@@Int@@sl$OBJ f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (x Int)
                  (y sl$OBJ) )
                (! (= (and (elem@@Int x (dom@@Int@@sl$OBJ f1))
                           (= (apply@@Int@@sl$OBJ f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@Int x (dom@@Int@@sl$OBJ f1))
                     (apply@@Int@@sl$OBJ f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (x Int)
                  (y sl$OBJ) )
                (! (= (and (elem@@Int x (dom@@Int@@sl$OBJ f1))
                           (= (apply@@Int@@sl$OBJ f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@Int x (dom@@Int@@sl$OBJ f1))
                     (apply@@Int@@sl$OBJ f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (x Int)
                  (y sl$OBJ) )
                (! (= (and (elem@@Int x (dom@@Int@@sl$OBJ f1))
                           (= (apply@@Int@@sl$OBJ f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@Int x (dom@@Int@@sl$OBJ f1))
                     (apply@@Int@@sl$OBJ f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (and (elem@@sl$Addr x
                                          (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                           (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                              y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@sl$Addr x
                                    (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                     (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (and (elem@@sl$Addr x
                                          (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                           (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                              y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@sl$Addr x
                                    (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                     (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (and (elem@@sl$Addr x
                                          (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                           (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                              y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@sl$Addr x
                                    (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                     (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (and (elem@@sl$Addr x
                                          (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                           (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                              y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@sl$Addr x
                                    (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                     (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ)
                  (y sl$OBJ) )
                (! (= (and (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                           (= (apply@@sl$REQ@@sl$OBJ f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                     (apply@@sl$REQ@@sl$OBJ f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ)
                  (y sl$OBJ) )
                (! (= (and (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                           (= (apply@@sl$REQ@@sl$OBJ f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                     (apply@@sl$REQ@@sl$OBJ f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ)
                  (y sl$OBJ) )
                (! (= (and (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                           (= (apply@@sl$REQ@@sl$OBJ f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                     (apply@@sl$REQ@@sl$OBJ f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ)
                  (y sl$OBJ) )
                (! (= (and (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                           (= (apply@@sl$REQ@@sl$OBJ f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                     (apply@@sl$REQ@@sl$OBJ f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (x Int)
                  (x2 Int)
                  (y sl$Addr) )
                (! (=> (not (= x x2))
                       (= (apply@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 (mk-fun@@Int@@sl$Addr x y))
                                               x2)
                          (apply@@Int@@sl$Addr f1 x2)))
                   :pattern
                   ( (apply@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 (mk-fun@@Int@@sl$Addr x y))
                                          x2) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (x Int)
                  (x2 Int)
                  (y sl$OBJ) )
                (! (=> (not (= x x2))
                       (= (apply@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 (mk-fun@@Int@@sl$OBJ x y))
                                              x2)
                          (apply@@Int@@sl$OBJ f1 x2)))
                   :pattern
                   ( (apply@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 (mk-fun@@Int@@sl$OBJ x y))
                                         x2) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr)
                  (x2 sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (=> (not (= x x2))
                       (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                                                                                                  (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y))
                                                                                                       x2)
                          (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x2)))
                   :pattern
                   ( (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                                                                                             (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y))
                                                                                                  x2) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ)
                  (x2 sl$REQ)
                  (y sl$OBJ) )
                (! (=> (not (= x x2))
                       (= (apply@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 (mk-fun@@sl$REQ@@sl$OBJ x y))
                                                 x2)
                          (apply@@sl$REQ@@sl$OBJ f1 x2)))
                   :pattern
                   ( (apply@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 (mk-fun@@sl$REQ@@sl$OBJ x y))
                                            x2) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (x Int)
                  (y sl$Addr) )
                (! (= (apply@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 (mk-fun@@Int@@sl$Addr x y))
                                           x)
                      y)
                   :pattern
                   ( (apply@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 (mk-fun@@Int@@sl$Addr x y))
                                          x) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (x Int)
                  (y sl$OBJ) )
                (! (= (apply@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 (mk-fun@@Int@@sl$OBJ x y)) x)
                      y)
                   :pattern
                   ( (apply@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 (mk-fun@@Int@@sl$OBJ x y)) x) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                                                                                              (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y))
                                                                                                   x)
                      y)
                   :pattern
                   ( (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                                                                                             (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y))
                                                                                                  x) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ)
                  (y sl$OBJ) )
                (! (= (apply@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 (mk-fun@@sl$REQ@@sl$OBJ x y))
                                             x)
                      y)
                   :pattern
                   ( (apply@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 (mk-fun@@sl$REQ@@sl$OBJ x y))
                                            x) ))))
(assert (= (ran@@Int@@sl$Addr empty-fun@@Int@@sl$Addr)
           empty-set@@sl$Addr))
(assert (= (ran@@Int@@sl$OBJ empty-fun@@Int@@sl$OBJ)
           empty-set@@sl$OBJ))
(assert (= (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close)
           empty-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close))
(assert (= (ran@@sl$REQ@@sl$OBJ empty-fun@@sl$REQ@@sl$OBJ)
           empty-set@@sl$OBJ))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (y sl$Addr) )
                (! (= (elem@@sl$Addr y (ran@@Int@@sl$Addr f1))
                      (exists ( (x Int) )
                              (and true
                                   (and (elem@@Int x (dom@@Int@@sl$Addr f1))
                                        (= (apply@@Int@@sl$Addr f1 x) y)))))
                   :pattern
                   ( (elem@@sl$Addr y (ran@@Int@@sl$Addr f1)) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (y sl$OBJ) )
                (! (= (elem@@sl$OBJ y (ran@@Int@@sl$OBJ f1))
                      (exists ( (x Int) )
                              (and true
                                   (and (elem@@Int x (dom@@Int@@sl$OBJ f1))
                                        (= (apply@@Int@@sl$OBJ f1 x) y)))))
                   :pattern
                   ( (elem@@sl$OBJ y (ran@@Int@@sl$OBJ f1)) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y
                                                                                         (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                      (exists ( (x sl$Addr) )
                              (and true
                                   (and (elem@@sl$Addr x
                                                       (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                                        (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                                           y)))))
                   :pattern
                   ( (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y
                                                                                        (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (y sl$OBJ) )
                (! (= (elem@@sl$OBJ y (ran@@sl$REQ@@sl$OBJ f1))
                      (exists ( (x sl$REQ) )
                              (and true
                                   (and (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                                        (= (apply@@sl$REQ@@sl$OBJ f1 x) y)))))
                   :pattern
                   ( (elem@@sl$OBJ y (ran@@sl$REQ@@sl$OBJ f1)) ))))
(assert (forall ( (x Int)
                  (y sl$Addr) )
                (! (= (ran@@Int@@sl$Addr (mk-fun@@Int@@sl$Addr x y))
                      (mk-set@@sl$Addr y))
                   :pattern
                   ( (ran@@Int@@sl$Addr (mk-fun@@Int@@sl$Addr x y)) ))))
(assert (forall ( (x Int)
                  (y sl$OBJ) )
                (! (= (ran@@Int@@sl$OBJ (mk-fun@@Int@@sl$OBJ x y))
                      (mk-set@@sl$OBJ y))
                   :pattern
                   ( (ran@@Int@@sl$OBJ (mk-fun@@Int@@sl$OBJ x y)) ))))
(assert (forall ( (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y))
                      (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y))
                   :pattern
                   ( (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y)) ))))
(assert (forall ( (x sl$REQ)
                  (y sl$OBJ) )
                (! (= (ran@@sl$REQ@@sl$OBJ (mk-fun@@sl$REQ@@sl$OBJ x y))
                      (mk-set@@sl$OBJ y))
                   :pattern
                   ( (ran@@sl$REQ@@sl$OBJ (mk-fun@@sl$REQ@@sl$OBJ x y)) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (s1 (set Int))
                  (s2 (set sl$Addr)) )
                (! (= (elem@Open@@pfun@@Int@@sl$Addr@Close f1 (tfun@@Int@@sl$Addr s1 s2))
                      (and (= s1 (dom@@Int@@sl$Addr f1))
                           (subset (ran@@Int@@sl$Addr f1) s2)))
                   :pattern
                   ( (elem@Open@@pfun@@Int@@sl$Addr@Close f1 (tfun@@Int@@sl$Addr s1 s2)) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (s1 (set Int))
                  (s2 (set sl$OBJ)) )
                (! (= (elem@Open@@pfun@@Int@@sl$OBJ@Close f1 (tfun@@Int@@sl$OBJ s1 s2))
                      (and (= s1 (dom@@Int@@sl$OBJ f1))
                           (subset (ran@@Int@@sl$OBJ f1) s2)))
                   :pattern
                   ( (elem@Open@@pfun@@Int@@sl$OBJ@Close f1 (tfun@@Int@@sl$OBJ s1 s2)) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s1 (set sl$Addr))
                  (s2 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close f1
                                                                                                                   (tfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 s2))
                      (and (= s1
                              (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                           (subset (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                                   s2)))
                   :pattern
                   ( (elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close f1
                                                                                                                  (tfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 s2)) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (s1 (set sl$REQ))
                  (s2 (set sl$OBJ)) )
                (! (= (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close f1 (tfun@@sl$REQ@@sl$OBJ s1 s2))
                      (and (= s1 (dom@@sl$REQ@@sl$OBJ f1))
                           (subset (ran@@sl$REQ@@sl$OBJ f1) s2)))
                   :pattern
                   ( (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close f1 (tfun@@sl$REQ@@sl$OBJ s1 s2)) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (s1 (set Int))
                  (s2 (set sl$Addr)) )
                (! (= (elem@Open@@pfun@@Int@@sl$Addr@Close f1 (pfun@@Int@@sl$Addr s1 s2))
                      (and (subset (dom@@Int@@sl$Addr f1) s1)
                           (subset (ran@@Int@@sl$Addr f1) s2)))
                   :pattern
                   ( (elem@Open@@pfun@@Int@@sl$Addr@Close f1 (pfun@@Int@@sl$Addr s1 s2)) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (s1 (set Int))
                  (s2 (set sl$OBJ)) )
                (! (= (elem@Open@@pfun@@Int@@sl$OBJ@Close f1 (pfun@@Int@@sl$OBJ s1 s2))
                      (and (subset (dom@@Int@@sl$OBJ f1) s1)
                           (subset (ran@@Int@@sl$OBJ f1) s2)))
                   :pattern
                   ( (elem@Open@@pfun@@Int@@sl$OBJ@Close f1 (pfun@@Int@@sl$OBJ s1 s2)) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s1 (set sl$Addr))
                  (s2 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close f1
                                                                                                                   (pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 s2))
                      (and (subset (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                                   s1)
                           (subset (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                                   s2)))
                   :pattern
                   ( (elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close f1
                                                                                                                  (pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 s2)) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (s1 (set sl$REQ))
                  (s2 (set sl$OBJ)) )
                (! (= (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close f1 (pfun@@sl$REQ@@sl$OBJ s1 s2))
                      (and (subset (dom@@sl$REQ@@sl$OBJ f1) s1)
                           (subset (ran@@sl$REQ@@sl$OBJ f1) s2)))
                   :pattern
                   ( (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close f1 (pfun@@sl$REQ@@sl$OBJ s1 s2)) ))))
(assert (forall ( (f1 (pfun Int sl$Addr)) )
                (! (= (injective@@Int@@sl$Addr f1)
                      (forall ( (x Int)
                                (x2 Int) )
                              (=> (and (elem@@Int x (dom@@Int@@sl$Addr f1))
                                       (elem@@Int x2 (dom@@Int@@sl$Addr f1)))
                                  (=> (= (apply@@Int@@sl$Addr f1 x)
                                         (apply@@Int@@sl$Addr f1 x2))
                                      (= x x2)))))
                   :pattern
                   ( (injective@@Int@@sl$Addr f1) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ)) )
                (! (= (injective@@Int@@sl$OBJ f1)
                      (forall ( (x Int)
                                (x2 Int) )
                              (=> (and (elem@@Int x (dom@@Int@@sl$OBJ f1))
                                       (elem@@Int x2 (dom@@Int@@sl$OBJ f1)))
                                  (=> (= (apply@@Int@@sl$OBJ f1 x)
                                         (apply@@Int@@sl$OBJ f1 x2))
                                      (= x x2)))))
                   :pattern
                   ( (injective@@Int@@sl$OBJ f1) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (injective@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                      (forall ( (x sl$Addr)
                                (x2 sl$Addr) )
                              (=> (and (elem@@sl$Addr x
                                                      (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                                       (elem@@sl$Addr x2
                                                      (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)))
                                  (=> (= (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                                         (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x2))
                                      (= x x2)))))
                   :pattern
                   ( (injective@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ)) )
                (! (= (injective@@sl$REQ@@sl$OBJ f1)
                      (forall ( (x sl$REQ)
                                (x2 sl$REQ) )
                              (=> (and (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                                       (elem@@sl$REQ x2 (dom@@sl$REQ@@sl$OBJ f1)))
                                  (=> (= (apply@@sl$REQ@@sl$OBJ f1 x)
                                         (apply@@sl$REQ@@sl$OBJ f1 x2))
                                      (= x x2)))))
                   :pattern
                   ( (injective@@sl$REQ@@sl$OBJ f1) ))))
(assert (injective@@Int@@sl$Addr empty-fun@@Int@@sl$Addr))
(assert (injective@@Int@@sl$OBJ empty-fun@@Int@@sl$OBJ))
(assert (injective@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close empty-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close))
(assert (injective@@sl$REQ@@sl$OBJ empty-fun@@sl$REQ@@sl$OBJ))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (x Int) )
                (! (=> (elem@@Int x (dom@@Int@@sl$Addr f1))
                       (elem@@sl$Addr (apply@@Int@@sl$Addr f1 x) (ran@@Int@@sl$Addr f1)))
                   :pattern
                   ( (elem@@sl$Addr (apply@@Int@@sl$Addr f1 x) (ran@@Int@@sl$Addr f1)) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (x Int) )
                (! (=> (elem@@Int x (dom@@Int@@sl$OBJ f1))
                       (elem@@sl$OBJ (apply@@Int@@sl$OBJ f1 x) (ran@@Int@@sl$OBJ f1)))
                   :pattern
                   ( (elem@@sl$OBJ (apply@@Int@@sl$OBJ f1 x) (ran@@Int@@sl$OBJ f1)) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr) )
                (! (=> (elem@@sl$Addr x
                                      (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                       (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                                                                                          (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)))
                   :pattern
                   ( (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                                                                                        (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ) )
                (! (=> (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                       (elem@@sl$OBJ (apply@@sl$REQ@@sl$OBJ f1 x)
                                     (ran@@sl$REQ@@sl$OBJ f1)))
                   :pattern
                   ( (elem@@sl$OBJ (apply@@sl$REQ@@sl$OBJ f1 x)
                                   (ran@@sl$REQ@@sl$OBJ f1)) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (elem@@Int x (set-diff@@Int (dom@@Int@@sl$Addr f1) s1))
                       (elem@@sl$Addr (apply@@Int@@sl$Addr f1 x)
                                      (ran@@Int@@sl$Addr (dom-subt@@Int@@sl$Addr s1 f1))))
                   :pattern
                   ( (elem@@sl$Addr (apply@@Int@@sl$Addr f1 x)
                                    (ran@@Int@@sl$Addr (dom-subt@@Int@@sl$Addr s1 f1))) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (elem@@Int x (set-diff@@Int (dom@@Int@@sl$OBJ f1) s1))
                       (elem@@sl$OBJ (apply@@Int@@sl$OBJ f1 x)
                                     (ran@@Int@@sl$OBJ (dom-subt@@Int@@sl$OBJ s1 f1))))
                   :pattern
                   ( (elem@@sl$OBJ (apply@@Int@@sl$OBJ f1 x)
                                   (ran@@Int@@sl$OBJ (dom-subt@@Int@@sl$OBJ s1 f1))) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s1 (set sl$Addr))
                  (x sl$Addr) )
                (! (=> (elem@@sl$Addr x
                                      (set-diff@@sl$Addr (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                                                         s1))
                       (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                                                                                          (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-subt@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1))))
                   :pattern
                   ( (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                                                                                        (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-subt@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1))) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (s1 (set sl$REQ))
                  (x sl$REQ) )
                (! (=> (elem@@sl$REQ x (set-diff@@sl$REQ (dom@@sl$REQ@@sl$OBJ f1) s1))
                       (elem@@sl$OBJ (apply@@sl$REQ@@sl$OBJ f1 x)
                                     (ran@@sl$REQ@@sl$OBJ (dom-subt@@sl$REQ@@sl$OBJ s1 f1))))
                   :pattern
                   ( (elem@@sl$OBJ (apply@@sl$REQ@@sl$OBJ f1 x)
                                   (ran@@sl$REQ@@sl$OBJ (dom-subt@@sl$REQ@@sl$OBJ s1 f1))) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (elem@@Int x (intersect (dom@@Int@@sl$Addr f1) s1))
                       (elem@@sl$Addr (apply@@Int@@sl$Addr f1 x)
                                      (ran@@Int@@sl$Addr (dom-rest@@Int@@sl$Addr s1 f1))))
                   :pattern
                   ( (elem@@sl$Addr (apply@@Int@@sl$Addr f1 x)
                                    (ran@@Int@@sl$Addr (dom-rest@@Int@@sl$Addr s1 f1))) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (elem@@Int x (intersect (dom@@Int@@sl$OBJ f1) s1))
                       (elem@@sl$OBJ (apply@@Int@@sl$OBJ f1 x)
                                     (ran@@Int@@sl$OBJ (dom-rest@@Int@@sl$OBJ s1 f1))))
                   :pattern
                   ( (elem@@sl$OBJ (apply@@Int@@sl$OBJ f1 x)
                                   (ran@@Int@@sl$OBJ (dom-rest@@Int@@sl$OBJ s1 f1))) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s1 (set sl$Addr))
                  (x sl$Addr) )
                (! (=> (elem@@sl$Addr x
                                      (intersect (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                                                 s1))
                       (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                                                                                          (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-rest@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1))))
                   :pattern
                   ( (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)
                                                                                        (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (dom-rest@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 f1))) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (s1 (set sl$REQ))
                  (x sl$REQ) )
                (! (=> (elem@@sl$REQ x (intersect (dom@@sl$REQ@@sl$OBJ f1) s1))
                       (elem@@sl$OBJ (apply@@sl$REQ@@sl$OBJ f1 x)
                                     (ran@@sl$REQ@@sl$OBJ (dom-rest@@sl$REQ@@sl$OBJ s1 f1))))
                   :pattern
                   ( (elem@@sl$OBJ (apply@@sl$REQ@@sl$OBJ f1 x)
                                   (ran@@sl$REQ@@sl$OBJ (dom-rest@@sl$REQ@@sl$OBJ s1 f1))) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (x Int)
                  (y sl$Addr) )
                (! (=> (and (elem@@Int x (dom@@Int@@sl$Addr f1))
                            (injective@@Int@@sl$Addr f1))
                       (= (ran@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 (mk-fun@@Int@@sl$Addr x y)))
                          (union (set-diff@@sl$Addr (ran@@Int@@sl$Addr f1)
                                                    (mk-set@@sl$Addr (apply@@Int@@sl$Addr f1 x)))
                                 (mk-set@@sl$Addr y))))
                   :pattern
                   ( (ran@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 (mk-fun@@Int@@sl$Addr x y))) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (x Int)
                  (y sl$OBJ) )
                (! (=> (and (elem@@Int x (dom@@Int@@sl$OBJ f1))
                            (injective@@Int@@sl$OBJ f1))
                       (= (ran@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 (mk-fun@@Int@@sl$OBJ x y)))
                          (union (set-diff@@sl$OBJ (ran@@Int@@sl$OBJ f1)
                                                   (mk-set@@sl$OBJ (apply@@Int@@sl$OBJ f1 x)))
                                 (mk-set@@sl$OBJ y))))
                   :pattern
                   ( (ran@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 (mk-fun@@Int@@sl$OBJ x y))) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (=> (and (elem@@sl$Addr x
                                           (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                            (injective@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1))
                       (= (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                                                                                                (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y)))
                          (union (set-diff@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                                                                                                        (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1 x)))
                                 (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y))))
                   :pattern
                   ( (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                                                                                           (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y))) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ)
                  (y sl$OBJ) )
                (! (=> (and (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1))
                            (injective@@sl$REQ@@sl$OBJ f1))
                       (= (ran@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 (mk-fun@@sl$REQ@@sl$OBJ x y)))
                          (union (set-diff@@sl$OBJ (ran@@sl$REQ@@sl$OBJ f1)
                                                   (mk-set@@sl$OBJ (apply@@sl$REQ@@sl$OBJ f1 x)))
                                 (mk-set@@sl$OBJ y))))
                   :pattern
                   ( (ran@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 (mk-fun@@sl$REQ@@sl$OBJ x y))) ))))
(assert (forall ( (f1 (pfun Int sl$Addr))
                  (x Int)
                  (y sl$Addr) )
                (! (=> (not (elem@@Int x (dom@@Int@@sl$Addr f1)))
                       (= (ran@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 (mk-fun@@Int@@sl$Addr x y)))
                          (union (ran@@Int@@sl$Addr f1) (mk-set@@sl$Addr y))))
                   :pattern
                   ( (ran@@Int@@sl$Addr (ovl@@Int@@sl$Addr f1 (mk-fun@@Int@@sl$Addr x y))) ))))
(assert (forall ( (f1 (pfun Int sl$OBJ))
                  (x Int)
                  (y sl$OBJ) )
                (! (=> (not (elem@@Int x (dom@@Int@@sl$OBJ f1)))
                       (= (ran@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 (mk-fun@@Int@@sl$OBJ x y)))
                          (union (ran@@Int@@sl$OBJ f1) (mk-set@@sl$OBJ y))))
                   :pattern
                   ( (ran@@Int@@sl$OBJ (ovl@@Int@@sl$OBJ f1 (mk-fun@@Int@@sl$OBJ x y))) ))))
(assert (forall ( (f1 (pfun sl$Addr
                            (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (x sl$Addr)
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (=> (not (elem@@sl$Addr x
                                           (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)))
                       (= (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                                                                                                (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y)))
                          (union (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1)
                                 (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y))))
                   :pattern
                   ( (ran@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ovl@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close f1
                                                                                                                                                                           (mk-fun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x y))) ))))
(assert (forall ( (f1 (pfun sl$REQ sl$OBJ))
                  (x sl$REQ)
                  (y sl$OBJ) )
                (! (=> (not (elem@@sl$REQ x (dom@@sl$REQ@@sl$OBJ f1)))
                       (= (ran@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 (mk-fun@@sl$REQ@@sl$OBJ x y)))
                          (union (ran@@sl$REQ@@sl$OBJ f1) (mk-set@@sl$OBJ y))))
                   :pattern
                   ( (ran@@sl$REQ@@sl$OBJ (ovl@@sl$REQ@@sl$OBJ f1 (mk-fun@@sl$REQ@@sl$OBJ x y))) ))))
(assert (forall ( (x Int)
                  (y Int) )
                (! (= (elem@@Int x (mk-set@@Int y)) (= x y))
                   :pattern
                   ( (elem@@Int x (mk-set@@Int y)) ))))
(assert (forall ( (x (Record-item-left-right sl$OBJ sl$Addr sl$Addr))
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x
                                                                                         (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y))
                      (= x y))
                   :pattern
                   ( (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x
                                                                                        (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y)) ))))
(assert (forall ( (x (pfun Int sl$Addr))
                  (y (pfun Int sl$Addr)) )
                (! (= (elem@Open@@pfun@@Int@@sl$Addr@Close x (mk-set@Open@@pfun@@Int@@sl$Addr@Close y))
                      (= x y))
                   :pattern
                   ( (elem@Open@@pfun@@Int@@sl$Addr@Close x (mk-set@Open@@pfun@@Int@@sl$Addr@Close y)) ))))
(assert (forall ( (x (pfun Int sl$OBJ))
                  (y (pfun Int sl$OBJ)) )
                (! (= (elem@Open@@pfun@@Int@@sl$OBJ@Close x (mk-set@Open@@pfun@@Int@@sl$OBJ@Close y))
                      (= x y))
                   :pattern
                   ( (elem@Open@@pfun@@Int@@sl$OBJ@Close x (mk-set@Open@@pfun@@Int@@sl$OBJ@Close y)) ))))
(assert (forall ( (x (pfun sl$Addr
                           (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (y (pfun sl$Addr
                           (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close x
                                                                                                                   (mk-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close y))
                      (= x y))
                   :pattern
                   ( (elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close x
                                                                                                                  (mk-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close y)) ))))
(assert (forall ( (x (pfun sl$REQ sl$OBJ))
                  (y (pfun sl$REQ sl$OBJ)) )
                (! (= (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close x (mk-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close y))
                      (= x y))
                   :pattern
                   ( (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close x (mk-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close y)) ))))
(assert (forall ( (x sl$Addr)
                  (y sl$Addr) )
                (! (= (elem@@sl$Addr x (mk-set@@sl$Addr y)) (= x y))
                   :pattern
                   ( (elem@@sl$Addr x (mk-set@@sl$Addr y)) ))))
(assert (forall ( (x sl$OBJ)
                  (y sl$OBJ) )
                (! (= (elem@@sl$OBJ x (mk-set@@sl$OBJ y)) (= x y))
                   :pattern
                   ( (elem@@sl$OBJ x (mk-set@@sl$OBJ y)) ))))
(assert (forall ( (x sl$REQ)
                  (y sl$REQ) )
                (! (= (elem@@sl$REQ x (mk-set@@sl$REQ y)) (= x y))
                   :pattern
                   ( (elem@@sl$REQ x (mk-set@@sl$REQ y)) ))))
(assert (forall ( (r1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (term (Array (Record-item-left-right sl$OBJ sl$Addr sl$Addr)
                               (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y
                                                                                         (set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r1 term))
                      (exists ( (x (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                              (and (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x r1)
                                   (= (select term x) y))))
                   :pattern
                   ( (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y
                                                                                        (set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r1 term)) ))))
(assert (forall ( (r1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (term (Array (Record-item-left-right sl$OBJ sl$Addr sl$Addr)
                               (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (y (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (= (set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r1 term)
                         (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y))
                      (forall ( (x (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                              (=> (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x r1)
                                  (= (select term x) y))))
                   :pattern
                   ( (set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r1 term)
                     (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close y) ))))
(assert (forall ( (s1 (set Int))
                  (s2 (set Int)) )
                (! (=> (finite@@Int s1)
                       (finite@@Int (set-diff@@Int s1 s2)))
                   :pattern
                   ( (finite@@Int (set-diff@@Int s1 s2)) ))))
(assert (forall ( (s1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s2 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (=> (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1)
                       (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (set-diff@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 s2)))
                   :pattern
                   ( (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (set-diff@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 s2)) ))))
(assert (forall ( (s1 (set (pfun Int sl$Addr)))
                  (s2 (set (pfun Int sl$Addr))) )
                (! (=> (finite@Open@@pfun@@Int@@sl$Addr@Close s1)
                       (finite@Open@@pfun@@Int@@sl$Addr@Close (set-diff@Open@@pfun@@Int@@sl$Addr@Close s1 s2)))
                   :pattern
                   ( (finite@Open@@pfun@@Int@@sl$Addr@Close (set-diff@Open@@pfun@@Int@@sl$Addr@Close s1 s2)) ))))
(assert (forall ( (s1 (set (pfun Int sl$OBJ)))
                  (s2 (set (pfun Int sl$OBJ))) )
                (! (=> (finite@Open@@pfun@@Int@@sl$OBJ@Close s1)
                       (finite@Open@@pfun@@Int@@sl$OBJ@Close (set-diff@Open@@pfun@@Int@@sl$OBJ@Close s1 s2)))
                   :pattern
                   ( (finite@Open@@pfun@@Int@@sl$OBJ@Close (set-diff@Open@@pfun@@Int@@sl$OBJ@Close s1 s2)) ))))
(assert (forall ( (s1 (set (pfun sl$Addr
                                 (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
                  (s2 (set (pfun sl$Addr
                                 (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
                (! (=> (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close s1)
                       (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (set-diff@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close s1 s2)))
                   :pattern
                   ( (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (set-diff@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close s1 s2)) ))))
(assert (forall ( (s1 (set (pfun sl$REQ sl$OBJ)))
                  (s2 (set (pfun sl$REQ sl$OBJ))) )
                (! (=> (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close s1)
                       (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close (set-diff@Open@@pfun@@sl$REQ@@sl$OBJ@Close s1 s2)))
                   :pattern
                   ( (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close (set-diff@Open@@pfun@@sl$REQ@@sl$OBJ@Close s1 s2)) ))))
(assert (forall ( (s1 (set sl$Addr))
                  (s2 (set sl$Addr)) )
                (! (=> (finite@@sl$Addr s1)
                       (finite@@sl$Addr (set-diff@@sl$Addr s1 s2)))
                   :pattern
                   ( (finite@@sl$Addr (set-diff@@sl$Addr s1 s2)) ))))
(assert (forall ( (s1 (set sl$OBJ))
                  (s2 (set sl$OBJ)) )
                (! (=> (finite@@sl$OBJ s1)
                       (finite@@sl$OBJ (set-diff@@sl$OBJ s1 s2)))
                   :pattern
                   ( (finite@@sl$OBJ (set-diff@@sl$OBJ s1 s2)) ))))
(assert (forall ( (s1 (set sl$REQ))
                  (s2 (set sl$REQ)) )
                (! (=> (finite@@sl$REQ s1)
                       (finite@@sl$REQ (set-diff@@sl$REQ s1 s2)))
                   :pattern
                   ( (finite@@sl$REQ (set-diff@@sl$REQ s1 s2)) ))))
(assert (forall ( (s1 (set Int))
                  (s2 (set Int)) )
                (! (=> (and (finite@@Int s1) (finite@@Int s2))
                       (finite@@Int (union s1 s2)))
                   :pattern
                   ( (finite@@Int (union s1 s2)) ))))
(assert (forall ( (s1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s2 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (=> (and (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1)
                            (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s2))
                       (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (union s1 s2)))
                   :pattern
                   ( (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (union s1 s2)) ))))
(assert (forall ( (s1 (set (pfun Int sl$Addr)))
                  (s2 (set (pfun Int sl$Addr))) )
                (! (=> (and (finite@Open@@pfun@@Int@@sl$Addr@Close s1)
                            (finite@Open@@pfun@@Int@@sl$Addr@Close s2))
                       (finite@Open@@pfun@@Int@@sl$Addr@Close (union s1 s2)))
                   :pattern
                   ( (finite@Open@@pfun@@Int@@sl$Addr@Close (union s1 s2)) ))))
(assert (forall ( (s1 (set (pfun Int sl$OBJ)))
                  (s2 (set (pfun Int sl$OBJ))) )
                (! (=> (and (finite@Open@@pfun@@Int@@sl$OBJ@Close s1)
                            (finite@Open@@pfun@@Int@@sl$OBJ@Close s2))
                       (finite@Open@@pfun@@Int@@sl$OBJ@Close (union s1 s2)))
                   :pattern
                   ( (finite@Open@@pfun@@Int@@sl$OBJ@Close (union s1 s2)) ))))
(assert (forall ( (s1 (set (pfun sl$Addr
                                 (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
                  (s2 (set (pfun sl$Addr
                                 (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
                (! (=> (and (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close s1)
                            (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close s2))
                       (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (union s1 s2)))
                   :pattern
                   ( (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (union s1 s2)) ))))
(assert (forall ( (s1 (set (pfun sl$REQ sl$OBJ)))
                  (s2 (set (pfun sl$REQ sl$OBJ))) )
                (! (=> (and (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close s1)
                            (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close s2))
                       (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close (union s1 s2)))
                   :pattern
                   ( (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close (union s1 s2)) ))))
(assert (forall ( (s1 (set sl$Addr))
                  (s2 (set sl$Addr)) )
                (! (=> (and (finite@@sl$Addr s1) (finite@@sl$Addr s2))
                       (finite@@sl$Addr (union s1 s2)))
                   :pattern
                   ( (finite@@sl$Addr (union s1 s2)) ))))
(assert (forall ( (s1 (set sl$OBJ))
                  (s2 (set sl$OBJ)) )
                (! (=> (and (finite@@sl$OBJ s1) (finite@@sl$OBJ s2))
                       (finite@@sl$OBJ (union s1 s2)))
                   :pattern
                   ( (finite@@sl$OBJ (union s1 s2)) ))))
(assert (forall ( (s1 (set sl$REQ))
                  (s2 (set sl$REQ)) )
                (! (=> (and (finite@@sl$REQ s1) (finite@@sl$REQ s2))
                       (finite@@sl$REQ (union s1 s2)))
                   :pattern
                   ( (finite@@sl$REQ (union s1 s2)) ))))
(assert (forall ( (s1 (set Int))
                  (s2 (set Int)) )
                (! (=> (and (finite@@Int s2) (not (finite@@Int s1)))
                       (not (finite@@Int (set-diff@@Int s1 s2))))
                   :pattern
                   ( (finite@@Int (set-diff@@Int s1 s2)) ))))
(assert (forall ( (s1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))
                  (s2 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (=> (and (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s2)
                            (not (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1)))
                       (not (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (set-diff@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 s2))))
                   :pattern
                   ( (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (set-diff@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close s1 s2)) ))))
(assert (forall ( (s1 (set (pfun Int sl$Addr)))
                  (s2 (set (pfun Int sl$Addr))) )
                (! (=> (and (finite@Open@@pfun@@Int@@sl$Addr@Close s2)
                            (not (finite@Open@@pfun@@Int@@sl$Addr@Close s1)))
                       (not (finite@Open@@pfun@@Int@@sl$Addr@Close (set-diff@Open@@pfun@@Int@@sl$Addr@Close s1 s2))))
                   :pattern
                   ( (finite@Open@@pfun@@Int@@sl$Addr@Close (set-diff@Open@@pfun@@Int@@sl$Addr@Close s1 s2)) ))))
(assert (forall ( (s1 (set (pfun Int sl$OBJ)))
                  (s2 (set (pfun Int sl$OBJ))) )
                (! (=> (and (finite@Open@@pfun@@Int@@sl$OBJ@Close s2)
                            (not (finite@Open@@pfun@@Int@@sl$OBJ@Close s1)))
                       (not (finite@Open@@pfun@@Int@@sl$OBJ@Close (set-diff@Open@@pfun@@Int@@sl$OBJ@Close s1 s2))))
                   :pattern
                   ( (finite@Open@@pfun@@Int@@sl$OBJ@Close (set-diff@Open@@pfun@@Int@@sl$OBJ@Close s1 s2)) ))))
(assert (forall ( (s1 (set (pfun sl$Addr
                                 (Record-item-left-right sl$OBJ sl$Addr sl$Addr))))
                  (s2 (set (pfun sl$Addr
                                 (Record-item-left-right sl$OBJ sl$Addr sl$Addr)))) )
                (! (=> (and (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close s2)
                            (not (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close s1)))
                       (not (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (set-diff@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close s1 s2))))
                   :pattern
                   ( (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (set-diff@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close s1 s2)) ))))
(assert (forall ( (s1 (set (pfun sl$REQ sl$OBJ)))
                  (s2 (set (pfun sl$REQ sl$OBJ))) )
                (! (=> (and (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close s2)
                            (not (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close s1)))
                       (not (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close (set-diff@Open@@pfun@@sl$REQ@@sl$OBJ@Close s1 s2))))
                   :pattern
                   ( (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close (set-diff@Open@@pfun@@sl$REQ@@sl$OBJ@Close s1 s2)) ))))
(assert (forall ( (s1 (set sl$Addr))
                  (s2 (set sl$Addr)) )
                (! (=> (and (finite@@sl$Addr s2) (not (finite@@sl$Addr s1)))
                       (not (finite@@sl$Addr (set-diff@@sl$Addr s1 s2))))
                   :pattern
                   ( (finite@@sl$Addr (set-diff@@sl$Addr s1 s2)) ))))
(assert (forall ( (s1 (set sl$OBJ))
                  (s2 (set sl$OBJ)) )
                (! (=> (and (finite@@sl$OBJ s2) (not (finite@@sl$OBJ s1)))
                       (not (finite@@sl$OBJ (set-diff@@sl$OBJ s1 s2))))
                   :pattern
                   ( (finite@@sl$OBJ (set-diff@@sl$OBJ s1 s2)) ))))
(assert (forall ( (s1 (set sl$REQ))
                  (s2 (set sl$REQ)) )
                (! (=> (and (finite@@sl$REQ s2) (not (finite@@sl$REQ s1)))
                       (not (finite@@sl$REQ (set-diff@@sl$REQ s1 s2))))
                   :pattern
                   ( (finite@@sl$REQ (set-diff@@sl$REQ s1 s2)) ))))
(assert (forall ( (x Int) )
                (! (finite@@Int (mk-set@@Int x))
                   :pattern
                   ( (finite@@Int (mk-set@@Int x)) ))))
(assert (forall ( (x (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x))
                   :pattern
                   ( (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (mk-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close x)) ))))
(assert (forall ( (x (pfun Int sl$Addr)) )
                (! (finite@Open@@pfun@@Int@@sl$Addr@Close (mk-set@Open@@pfun@@Int@@sl$Addr@Close x))
                   :pattern
                   ( (finite@Open@@pfun@@Int@@sl$Addr@Close (mk-set@Open@@pfun@@Int@@sl$Addr@Close x)) ))))
(assert (forall ( (x (pfun Int sl$OBJ)) )
                (! (finite@Open@@pfun@@Int@@sl$OBJ@Close (mk-set@Open@@pfun@@Int@@sl$OBJ@Close x))
                   :pattern
                   ( (finite@Open@@pfun@@Int@@sl$OBJ@Close (mk-set@Open@@pfun@@Int@@sl$OBJ@Close x)) ))))
(assert (forall ( (x (pfun sl$Addr
                           (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (mk-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close x))
                   :pattern
                   ( (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close (mk-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close x)) ))))
(assert (forall ( (x (pfun sl$REQ sl$OBJ)) )
                (! (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close (mk-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close x))
                   :pattern
                   ( (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close (mk-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close x)) ))))
(assert (forall ( (x sl$Addr) )
                (! (finite@@sl$Addr (mk-set@@sl$Addr x))
                   :pattern
                   ( (finite@@sl$Addr (mk-set@@sl$Addr x)) ))))
(assert (forall ( (x sl$OBJ) )
                (! (finite@@sl$OBJ (mk-set@@sl$OBJ x))
                   :pattern
                   ( (finite@@sl$OBJ (mk-set@@sl$OBJ x)) ))))
(assert (forall ( (x sl$REQ) )
                (! (finite@@sl$REQ (mk-set@@sl$REQ x))
                   :pattern
                   ( (finite@@sl$REQ (mk-set@@sl$REQ x)) ))))
(assert (finite@@Int empty-set@@Int))
(assert (finite@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close empty-set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close))
(assert (finite@Open@@pfun@@Int@@sl$Addr@Close empty-set@Open@@pfun@@Int@@sl$Addr@Close))
(assert (finite@Open@@pfun@@Int@@sl$OBJ@Close empty-set@Open@@pfun@@Int@@sl$OBJ@Close))
(assert (finite@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close empty-set@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close))
(assert (finite@Open@@pfun@@sl$REQ@@sl$OBJ@Close empty-set@Open@@pfun@@sl$REQ@@sl$OBJ@Close))
(assert (finite@@sl$Addr empty-set@@sl$Addr))
(assert (finite@@sl$OBJ empty-set@@sl$OBJ))
(assert (finite@@sl$REQ empty-set@@sl$REQ))
(assert (forall ( (r1 (set (Record-item-left-right sl$OBJ sl$Addr sl$Addr))) )
                (! (= (set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r1
                                                                                                                                                     ident@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close)
                      r1)
                   :pattern
                   ( (set@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close r1
                                                                                                                                                    ident@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close) ))))
(assert (forall ( (x Int)
                  (m Int)
                  (n Int) )
                (! (= (elem@@Int x (interval m n))
                      (and (<= m x) (<= x n)))
                   :pattern
                   ( (elem@@Int x (interval m n)) ))))
(assert (forall ( (x Int)
                  (m Int)
                  (n Int) )
                (! (= (elem@@Int x (intervalR m n))
                      (and (<= m x) (< x n)))
                   :pattern
                   ( (elem@@Int x (intervalR m n)) ))))
(assert (forall ( (m Int)
                  (n Int) )
                (! (=> (<= m n)
                       (= (union (intervalR m n) (mk-set@@Int n))
                          (intervalR m (+ n 1))))
                   :pattern
                   ( (union (intervalR m n) (mk-set@@Int n)) ))))
(assert (forall ( (m Int)
                  (n Int) )
                (! (=> (<= m n)
                       (= (union (intervalL m n) (mk-set@@Int (+ n 1)))
                          (intervalL m (+ n 1))))
                   :pattern
                   ( (union (intervalL m n) (mk-set@@Int (+ n 1))) ))))
(assert (forall ( (m Int)
                  (n Int) )
                (! (=> (<= m n)
                       (= (union (mk-set@@Int (- m 1)) (intervalR m n))
                          (intervalR (- m 1) n)))
                   :pattern
                   ( (union (mk-set@@Int (- m 1)) (intervalR m n)) ))))
(assert (forall ( (m Int)
                  (n Int) )
                (! (=> (<= m n)
                       (= (union (mk-set@@Int m) (intervalL m n))
                          (intervalL (- m 1) n)))
                   :pattern
                   ( (union (mk-set@@Int m) (intervalL m n)) ))))
(assert (forall ( (x Int)
                  (y Int)
                  (z Int) )
                (! (= (between x y z) (and (<= x y) (<= y z)))
                   :pattern
                   ( (between x y z) ))))
(assert (forall ( (x Int)
                  (y Int)
                  (z Int) )
                (! (= (betweenR x y z) (and (<= x y) (< y z)))
                   :pattern
                   ( (betweenR x y z) ))))
(assert (forall ( (x Int)
                  (y Int)
                  (z Int) )
                (! (= (betweenL x y z) (and (< x y) (<= y z)))
                   :pattern
                   ( (betweenL x y z) ))))
(assert (forall ( (x Int)
                  (y Int)
                  (z Int) )
                (! (= (betweenLR x y z) (and (< x y) (< y z)))
                   :pattern
                   ( (betweenLR x y z) ))))
(assert (forall ( (x Int)
                  (m Int)
                  (n Int) )
                (! (= (elem@@Int x (intervalL m n))
                      (and (< m x) (<= x n)))
                   :pattern
                   ( (elem@@Int x (intervalL m n)) ))))
(assert (forall ( (x Int)
                  (m Int)
                  (n Int) )
                (! (= (elem@@Int x (intervalL m n))
                      (and (< m x) (<= x n)))
                   :pattern
                   ( (elem@@Int x (intervalL m n)) ))))
(assert (forall ( (m Int) )
                (! (= (intervalR m m) empty-set@@Int)
                   :pattern
                   ( (intervalR m m) ))))
(assert (forall ( (m Int) )
                (! (= (intervalL m m) empty-set@@Int)
                   :pattern
                   ( (intervalL m m) ))))
(assert (forall ( (m Int) )
                (! (= (intervalR m (+ m 1)) (mk-set@@Int m))
                   :pattern
                   ( (intervalR m (+ m 1)) ))))
(assert (forall ( (m Int) )
                (! (= (intervalL (- m 1) m) (mk-set@@Int m))
                   :pattern
                   ( (intervalL (- m 1) m) ))))
(assert (forall ( (m Int)
                  (n Int)
                  (p Int) )
                (! (=> (and (<= m n) (<= n p))
                       (= (union (intervalR m n) (intervalR n p))
                          (intervalR m p)))
                   :pattern
                   ( (union (intervalR m n) (intervalR n p)) ))))
(assert (forall ( (m Int)
                  (n Int)
                  (p Int) )
                (! (=> (and (<= m n) (<= n p))
                       (= (union (intervalL m n) (intervalL n p))
                          (intervalL m p)))
                   :pattern
                   ( (union (intervalL m n) (intervalL n p)) ))))
(assert (not (forall ( (r sl$REQ)
                       (v Int) )
                     (=> true
                         (=> (and (= RH dummy) (= v ver) (elem@@sl$REQ r pshR))
                             (or (= RH@prime dummy)
                                 (not (and (= v ver@prime) (elem@@sl$REQ r pshR@prime)))))))))
(assert (not (forall ( (v Int) )
                     (=> true
                         (=> (and (= RH dummy) (= v ver) (elem@@sl$REQ r0 pshR))
                             (or (= RH@prime dummy)
                                 (not (and (= v ver@prime) (elem@@sl$REQ r0 pshR@prime)))))))))
(assert (forall ( (@@fv@@_0 (set sl$OBJ))
                  (@@fv@@_1 (set sl$Addr))
                  (@@fv@@_2 (set sl$Addr))
                  (@@bv@@_0 (Record-item-left-right sl$OBJ sl$Addr sl$Addr)) )
                (! (= (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close @@bv@@_0
                                                                                         (@@lambda@@_0 @@fv@@_0 @@fv@@_1 @@fv@@_2))
                      (and (elem@@sl$OBJ (@@field@@_item @@bv@@_0) @@fv@@_0)
                           (elem@@sl$Addr (@@field@@_left @@bv@@_0) @@fv@@_1)
                           (elem@@sl$Addr (@@field@@_right @@bv@@_0) @@fv@@_2)))
                   :pattern
                   ( (elem@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close @@bv@@_0
                                                                                        (@@lambda@@_0 @@fv@@_0 @@fv@@_1 @@fv@@_2)) ))))
; SKIP:LH
(assert (= LH@prime LH))
; SKIP:RH
(assert (= RH@prime RH))
; SKIP:emp
(assert (= emp@prime emp))
; SKIP:insL
(assert (= insL@prime insL))
; SKIP:insR
(assert (= insR@prime insR))
; SKIP:link
(assert (= link@prime link))
; SKIP:p
(assert (= p@prime p))
; SKIP:popR
(assert (= popR@prime popR))
; SKIP:ppd
(assert (= ppd@prime ppd))
; SKIP:pshL
(assert (= pshL@prime pshL))
; SKIP:pshR
(assert (= pshR@prime pshR))
; SKIP:q
(assert (= q@prime q))
; SKIP:qe
(assert (= qe@prime qe))
; SKIP:rep
(assert (= rep@prime rep))
; SKIP:res
(assert (= res@prime res))
; SKIP:result
(assert (= result@prime result))
; SKIP:ver
(assert (= ver@prime ver))
; m1:sch1
(assert (= v ver))
; m2:act0
(assert (= popL@prime (union popL (mk-set@@sl$REQ r))))
; m2:grd0
(assert (not (elem@@sl$REQ r Req)))
; m2:inv0
(assert (= Req req))
; m2:inv1
(assert (= (intersect pshL pshR) empty-set@@sl$REQ))
; m2:inv2
(assert (= (intersect pshL popL) empty-set@@sl$REQ))
; m2:inv3
(assert (= (intersect pshL popR) empty-set@@sl$REQ))
; m2:inv4
(assert (= (intersect pshR popL) empty-set@@sl$REQ))
; m2:inv5
(assert (= (intersect pshR popR) empty-set@@sl$REQ))
; m2:inv6
(assert (= (intersect popL popR) empty-set@@sl$REQ))
; m2:sch0
(assert (elem@@sl$REQ r pshR))
; m3:inv0
(assert (elem@Open@@pfun@@Int@@sl$OBJ@Close qe (tfun@@Int@@sl$OBJ (intervalR p q) sl$OBJ)))
; m3:inv1
(assert (<= p q))
; m3:inv2
(assert (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close insL (tfun@@sl$REQ@@sl$OBJ pshL sl$OBJ)))
; m3:inv3
(assert (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close insR (tfun@@sl$REQ@@sl$OBJ pshR sl$OBJ)))
; m3:inv4
(assert (elem@Open@@pfun@@sl$REQ@@sl$OBJ@Close res (pfun@@sl$REQ@@sl$OBJ ppd sl$OBJ)))
; m4:asm0
(assert (not (finite@@sl$Addr sl$Addr)))
; m4:inv0
(assert (injective@@Int@@sl$Addr rep))
; m4:inv1
(assert (elem@Open@@pfun@@Int@@sl$Addr@Close rep (tfun@@Int@@sl$Addr (intervalR p q) sl$Addr)))
; m4:inv2
(assert (not (elem@@sl$Addr dummy (ran@@Int@@sl$Addr rep))))
; m4:inv8
(assert (finite@@sl$Addr (ran@@Int@@sl$Addr rep)))
; m5:inv1
(assert (elem@Open@@pfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close@Close link
                                                                                                     (tfun@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close (ran@@Int@@sl$Addr rep) Node)))
; m5:inv11
(assert (forall ( (i Int) )
                (! (=> (betweenR p i (- q 1))
                       (= (@@field@@_right (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close link (apply@@Int@@sl$Addr rep i)))
                          (apply@@Int@@sl$Addr rep (+ i 1))))
                   :pattern
                   ( (@@field@@_right (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close link (apply@@Int@@sl$Addr rep i))) ))))
; m5:inv12
(assert (forall ( (i Int) )
                (! (=> (betweenR p i (- q 1))
                       (= (@@field@@_left (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close link (apply@@Int@@sl$Addr rep (+ i 1))))
                          (apply@@Int@@sl$Addr rep i)))
                   :pattern
                   ( (@@field@@_left (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close link (apply@@Int@@sl$Addr rep (+ i 1)))) ))))
; m5:inv13
(assert (=> (< p q) (= LH (apply@@Int@@sl$Addr rep p))))
; m5:inv14
(assert (=> (< p q) (= RH (apply@@Int@@sl$Addr rep (- q 1)))))
; m5:inv15
(assert (=> (= p q) (= LH dummy)))
; m5:inv16
(assert (=> (= p q) (= RH dummy)))
; m5:inv2
(assert (forall ( (i Int) )
                (! (=> (betweenR p i q)
                       (= (apply@@Int@@sl$OBJ qe i)
                          (@@field@@_item (apply@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close link (apply@@Int@@sl$Addr rep i)))))
                   :pattern
                   ( (apply@@Int@@sl$OBJ qe i) ))))
; m5:inv4
(assert (= (= p q) (= LH dummy)))
; m5:inv5
(assert (= (= p q) (= RH dummy)))
; m5:inv7
(assert (finite@@sl$Addr (dom@@sl$Addr@Open@@Record-item-left-right@@sl$OBJ@@sl$Addr@@sl$Addr@Close link)))
(assert (not (=> (and (= RH dummy) (= v0 ver) (elem@@sl$REQ r0 pshR))
                 (or (= RH@prime dummy)
                     (not (and (= v0 ver@prime) (elem@@sl$REQ r0 pshR@prime)))))))
(check-sat-using (or-else (then qe smt)
                          (then simplify smt)
                          (then skip smt)
                          (then (using-params simplify :expand-power true) smt)))
; m5/handle:pushR/C_SCH/weaken/saf/add:popL/SAF/handle:pushR:empty
