; m0/evt/INV/inv5/main goal/step 4
(set-option :auto-config false)
(set-option :smt.timeout 3000)
(declare-datatypes (a) ( (Maybe (Just (fromJust a)) Nothing) ))
(declare-datatypes () ( (Null null) ))
(declare-datatypes (a b) ( (Pair (pair (first a) (second b))) ))
(define-sort guarded (a) (Maybe a))
; comment: we don't need to declare the sort Bool
; comment: we don't need to declare the sort Int
; comment: we don't need to declare the sort Real
(define-sort pfun (a b) (Array a (Maybe b)))
(define-sort set (a) (Array a Bool))
(declare-const a Int)
(declare-const a@prime Int)
(declare-const b Int)
(declare-const b@prime Int)
(declare-const c Int)
(declare-const c@prime Int)
(declare-const f (pfun Int Int))
(declare-const f@prime (pfun Int Int))
(declare-const i Int)
(declare-const n Int)
(declare-const n@prime Int)
(declare-fun apply@@Int@@Int ( (pfun Int Int) Int ) Int)
(declare-fun card@@Int ( (set Int) ) Int)
(declare-fun dom@@Int@@Int ( (pfun Int Int) ) (set Int))
(declare-fun dom-rest@@Int@@Int
             ( (set Int)
               (pfun Int Int) )
             (pfun Int Int))
(declare-fun dom-subt@@Int@@Int
             ( (set Int)
               (pfun Int Int) )
             (pfun Int Int))
(declare-fun empty-fun@@Int@@Int () (pfun Int Int))
(declare-fun finite@@Int ( (set Int) ) Bool)
(declare-fun injective@@Int@@Int ( (pfun Int Int) ) Bool)
(declare-fun mk-fun@@Int@@Int (Int Int) (pfun Int Int))
(declare-fun mk-set@@Int (Int) (set Int))
(declare-fun ovl@@Int@@Int
             ( (pfun Int Int)
               (pfun Int Int) )
             (pfun Int Int))
(declare-fun ran@@Int@@Int ( (pfun Int Int) ) (set Int))
(define-fun all@@Int () (set Int) ( (as const (set Int)) true ))
(define-fun compl@@Int
            ( (s1 (set Int)) )
            (set Int)
            ( (_ map not)
              s1 ))
(define-fun elem@@Int
            ( (x Int)
              (s1 (set Int)) )
            Bool
            (select s1 x))
(define-fun empty-set@@Int
            ()
            (set Int)
            ( (as const (set Int))
              false ))
(define-fun set-diff@@Int
            ( (s1 (set Int))
              (s2 (set Int)) )
            (set Int)
            (intersect s1 ( (_ map not) s2 )))
(define-fun st-subset@@Int
            ( (s1 (set Int))
              (s2 (set Int)) )
            Bool
            (and (subset s1 s2) (not (= s1 s2))))
(assert (forall ( (i Int) )
                (! (= (elem@@Int i (dom@@Int@@Int f))
                      (and (<= 0 i) (< i n)))
                   :pattern
                   ( (elem@@Int i (dom@@Int@@Int f)) ))))
(assert (= f@prime (ovl@@Int@@Int f (mk-fun@@Int@@Int n a))))
(assert (forall ( (r (set Int)) )
                (! (=> (finite@@Int r) (<= 0 (card@@Int r)))
                   :pattern
                   ( (<= 0 (card@@Int r)) ))))
(assert (forall ( (r (set Int)) )
                (! (= (= (card@@Int r) 0) (= r empty-set@@Int))
                   :pattern
                   ( (card@@Int r) ))))
(assert (forall ( (x Int) )
                (! (= (card@@Int (mk-set@@Int x)) 1)
                   :pattern
                   ( (card@@Int (mk-set@@Int x)) ))))
(assert (forall ( (r (set Int)) )
                (! (= (= (card@@Int r) 1)
                      (exists ( (x Int) ) (and true (= r (mk-set@@Int x)))))
                   :pattern
                   ( (card@@Int r) ))))
(assert (forall ( (r (set Int))
                  (r0 (set Int)) )
                (! (=> (= (intersect r r0) empty-set@@Int)
                       (= (card@@Int (union r r0))
                          (+ (card@@Int r) (card@@Int r0))))
                   :pattern
                   ( (card@@Int (union r r0)) ))))
(assert (= (dom@@Int@@Int empty-fun@@Int@@Int)
           empty-set@@Int))
(assert (forall ( (f1 (pfun Int Int)) )
                (! (= (ovl@@Int@@Int f1 empty-fun@@Int@@Int) f1)
                   :pattern
                   ( (ovl@@Int@@Int f1 empty-fun@@Int@@Int) ))))
(assert (forall ( (f1 (pfun Int Int)) )
                (! (= (ovl@@Int@@Int empty-fun@@Int@@Int f1) f1)
                   :pattern
                   ( (ovl@@Int@@Int empty-fun@@Int@@Int f1) ))))
(assert (forall ( (x Int)
                  (y Int) )
                (! (= (dom@@Int@@Int (mk-fun@@Int@@Int x y))
                      (mk-set@@Int x))
                   :pattern
                   ( (dom@@Int@@Int (mk-fun@@Int@@Int x y)) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (f2 (pfun Int Int))
                  (x Int) )
                (! (=> (elem@@Int x (dom@@Int@@Int f2))
                       (= (apply@@Int@@Int (ovl@@Int@@Int f1 f2) x)
                          (apply@@Int@@Int f2 x)))
                   :pattern
                   ( (apply@@Int@@Int (ovl@@Int@@Int f1 f2) x) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (f2 (pfun Int Int))
                  (x Int) )
                (! (=> (and (elem@@Int x (dom@@Int@@Int f1))
                            (not (elem@@Int x (dom@@Int@@Int f2))))
                       (= (apply@@Int@@Int (ovl@@Int@@Int f1 f2) x)
                          (apply@@Int@@Int f1 x)))
                   :pattern
                   ( (apply@@Int@@Int (ovl@@Int@@Int f1 f2) x) ))))
(assert (forall ( (x Int)
                  (y Int) )
                (! (= (apply@@Int@@Int (mk-fun@@Int@@Int x y) x) y)
                   :pattern
                   ( (apply@@Int@@Int (mk-fun@@Int@@Int x y) x) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (and (elem@@Int x s1) (elem@@Int x (dom@@Int@@Int f1)))
                       (= (apply@@Int@@Int (dom-rest@@Int@@Int s1 f1) x)
                          (apply@@Int@@Int f1 x)))
                   :pattern
                   ( (apply@@Int@@Int (dom-rest@@Int@@Int s1 f1) x) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (elem@@Int x (set-diff@@Int (dom@@Int@@Int f1) s1))
                       (= (apply@@Int@@Int (dom-subt@@Int@@Int s1 f1) x)
                          (apply@@Int@@Int f1 x)))
                   :pattern
                   ( (apply@@Int@@Int (dom-subt@@Int@@Int s1 f1) x) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (f2 (pfun Int Int)) )
                (! (= (dom@@Int@@Int (ovl@@Int@@Int f1 f2))
                      (union (dom@@Int@@Int f1) (dom@@Int@@Int f2)))
                   :pattern
                   ( (dom@@Int@@Int (ovl@@Int@@Int f1 f2)) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (s1 (set Int)) )
                (! (= (dom@@Int@@Int (dom-rest@@Int@@Int s1 f1))
                      (intersect s1 (dom@@Int@@Int f1)))
                   :pattern
                   ( (dom@@Int@@Int (dom-rest@@Int@@Int s1 f1)) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (s1 (set Int)) )
                (! (= (dom@@Int@@Int (dom-subt@@Int@@Int s1 f1))
                      (set-diff@@Int (dom@@Int@@Int f1) s1))
                   :pattern
                   ( (dom@@Int@@Int (dom-subt@@Int@@Int s1 f1)) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (x Int)
                  (y Int) )
                (! (= (and (elem@@Int x (dom@@Int@@Int f1))
                           (= (apply@@Int@@Int f1 x) y))
                      (= (select f1 x) (Just y)))
                   :pattern
                   ( (elem@@Int x (dom@@Int@@Int f1))
                     (apply@@Int@@Int f1 x)
                     (select f1 x)
                     (Just y) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (x Int)
                  (x2 Int)
                  (y Int) )
                (! (=> (not (= x x2))
                       (= (apply@@Int@@Int (ovl@@Int@@Int f1 (mk-fun@@Int@@Int x y)) x2)
                          (apply@@Int@@Int f1 x2)))
                   :pattern
                   ( (apply@@Int@@Int (ovl@@Int@@Int f1 (mk-fun@@Int@@Int x y)) x2) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (x Int)
                  (y Int) )
                (! (= (apply@@Int@@Int (ovl@@Int@@Int f1 (mk-fun@@Int@@Int x y)) x)
                      y)
                   :pattern
                   ( (apply@@Int@@Int (ovl@@Int@@Int f1 (mk-fun@@Int@@Int x y)) x) ))))
(assert (= (ran@@Int@@Int empty-fun@@Int@@Int)
           empty-set@@Int))
(assert (forall ( (f1 (pfun Int Int))
                  (y Int) )
                (! (= (elem@@Int y (ran@@Int@@Int f1))
                      (exists ( (x Int) )
                              (and true
                                   (and (elem@@Int x (dom@@Int@@Int f1))
                                        (= (apply@@Int@@Int f1 x) y)))))
                   :pattern
                   ( (elem@@Int y (ran@@Int@@Int f1)) ))))
(assert (forall ( (x Int)
                  (y Int) )
                (! (= (ran@@Int@@Int (mk-fun@@Int@@Int x y))
                      (mk-set@@Int y))
                   :pattern
                   ( (ran@@Int@@Int (mk-fun@@Int@@Int x y)) ))))
(assert (forall ( (f1 (pfun Int Int)) )
                (! (= (injective@@Int@@Int f1)
                      (forall ( (x Int)
                                (x2 Int) )
                              (=> (and (elem@@Int x (dom@@Int@@Int f1))
                                       (elem@@Int x2 (dom@@Int@@Int f1)))
                                  (=> (= (apply@@Int@@Int f1 x) (apply@@Int@@Int f1 x2))
                                      (= x x2)))))
                   :pattern
                   ( (injective@@Int@@Int f1) ))))
(assert (injective@@Int@@Int empty-fun@@Int@@Int))
(assert (forall ( (f1 (pfun Int Int))
                  (x Int) )
                (! (=> (elem@@Int x (dom@@Int@@Int f1))
                       (elem@@Int (apply@@Int@@Int f1 x) (ran@@Int@@Int f1)))
                   :pattern
                   ( (elem@@Int (apply@@Int@@Int f1 x) (ran@@Int@@Int f1)) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (elem@@Int x (set-diff@@Int (dom@@Int@@Int f1) s1))
                       (elem@@Int (apply@@Int@@Int f1 x)
                                  (ran@@Int@@Int (dom-subt@@Int@@Int s1 f1))))
                   :pattern
                   ( (elem@@Int (apply@@Int@@Int f1 x)
                                (ran@@Int@@Int (dom-subt@@Int@@Int s1 f1))) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (s1 (set Int))
                  (x Int) )
                (! (=> (elem@@Int x (intersect (dom@@Int@@Int f1) s1))
                       (elem@@Int (apply@@Int@@Int f1 x)
                                  (ran@@Int@@Int (dom-rest@@Int@@Int s1 f1))))
                   :pattern
                   ( (elem@@Int (apply@@Int@@Int f1 x)
                                (ran@@Int@@Int (dom-rest@@Int@@Int s1 f1))) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (x Int)
                  (y Int) )
                (! (=> (and (elem@@Int x (dom@@Int@@Int f1))
                            (injective@@Int@@Int f1))
                       (= (ran@@Int@@Int (ovl@@Int@@Int f1 (mk-fun@@Int@@Int x y)))
                          (union (set-diff@@Int (ran@@Int@@Int f1)
                                                (mk-set@@Int (apply@@Int@@Int f1 x)))
                                 (mk-set@@Int y))))
                   :pattern
                   ( (ran@@Int@@Int (ovl@@Int@@Int f1 (mk-fun@@Int@@Int x y))) ))))
(assert (forall ( (f1 (pfun Int Int))
                  (x Int)
                  (y Int) )
                (! (=> (not (elem@@Int x (dom@@Int@@Int f1)))
                       (= (ran@@Int@@Int (ovl@@Int@@Int f1 (mk-fun@@Int@@Int x y)))
                          (union (ran@@Int@@Int f1) (mk-set@@Int y))))
                   :pattern
                   ( (ran@@Int@@Int (ovl@@Int@@Int f1 (mk-fun@@Int@@Int x y))) ))))
(assert (forall ( (x Int)
                  (y Int) )
                (! (= (elem@@Int x (mk-set@@Int y)) (= x y))
                   :pattern
                   ( (elem@@Int x (mk-set@@Int y)) ))))
(assert (forall ( (s1 (set Int))
                  (s2 (set Int)) )
                (! (=> (finite@@Int s1)
                       (finite@@Int (set-diff@@Int s1 s2)))
                   :pattern
                   ( (finite@@Int (set-diff@@Int s1 s2)) ))))
(assert (forall ( (s1 (set Int))
                  (s2 (set Int)) )
                (! (=> (and (finite@@Int s1) (finite@@Int s2))
                       (finite@@Int (union s1 s2)))
                   :pattern
                   ( (finite@@Int (union s1 s2)) ))))
(assert (forall ( (s1 (set Int))
                  (s2 (set Int)) )
                (! (=> (and (finite@@Int s2) (not (finite@@Int s1)))
                       (not (finite@@Int (set-diff@@Int s1 s2))))
                   :pattern
                   ( (finite@@Int (set-diff@@Int s1 s2)) ))))
(assert (forall ( (x Int) )
                (! (finite@@Int (mk-set@@Int x))
                   :pattern
                   ( (finite@@Int (mk-set@@Int x)) ))))
(assert (finite@@Int empty-set@@Int))
(assert (forall ( (i Int) )
                (! (= (elem@@Int i (dom@@Int@@Int f))
                      (and (<= 0 i) (< i n)))
                   :pattern
                   ( (elem@@Int i (dom@@Int@@Int f)) ))))
(assert (not (= (forall ( (i Int) )
                        (=> (and (<= 0 i) (< i n))
                            (= (apply@@Int@@Int f@prime i) (^ i 3))))
                (forall ( (i Int) )
                        (=> (and (<= 0 i) (< i n))
                            (= (apply@@Int@@Int f i) (^ i 3)))))))
(assert (not (forall ( (i Int) )
                     (=> true
                         (= (=> (and (<= 0 i) (< i n))
                                (= (apply@@Int@@Int f@prime i) (^ i 3)))
                            (=> (and (<= 0 i) (< i n))
                                (= (apply@@Int@@Int f i) (^ i 3))))))))
(assert (not (= (=> (and (<= 0 i) (< i n))
                    (= (apply@@Int@@Int f@prime i) (^ i 3)))
                (=> (and (<= 0 i) (< i n))
                    (= (apply@@Int@@Int f i) (^ i 3))))))
(assert (not (= (= (apply@@Int@@Int f@prime i) (^ i 3))
                (= (apply@@Int@@Int f i) (^ i 3)))))
(assert (not (= (apply@@Int@@Int f@prime i) (apply@@Int@@Int f i))))
(assert (not (= f@prime f)))
(check-sat-using (or-else (then qe smt)
                          (then simplify smt)
                          (then skip smt)
                          (then (using-params simplify :expand-power true) smt)))
; m0/evt/INV/inv5/main goal/step 4
